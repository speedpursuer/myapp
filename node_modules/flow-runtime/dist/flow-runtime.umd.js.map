{"version":3,"file":"flow-runtime.umd.js","sources":["../src/primitiveTypes.js","../src/errorReporting/makeJSONError.js","../src/cyclic.js","../src/Validation.js","../src/errorReporting/RuntimeTypeError.js","../src/errorReporting/makeTypeError.js","../src/makeError.js","../src/compareTypes.js","../src/types/Type.js","../src/types/AnyType.js","../src/errorMessages.js","../src/getErrorMessage.js","../src/types/TupleType.js","../src/types/ArrayType.js","../src/types/BooleanLiteralType.js","../src/types/BooleanType.js","../src/types/EmptyType.js","../src/types/ExistentialType.js","../src/types/TypeParameter.js","../src/types/FlowIntoType.js","../src/types/FunctionTypeParam.js","../src/types/FunctionTypeRestParam.js","../src/types/FunctionTypeReturn.js","../src/symbols.js","../src/types/FunctionType.js","../src/types/GeneratorType.js","../src/types/TypeParameterApplication.js","../src/types/TypeConstructor.js","../src/types/GenericType.js","../src/invariant.js","../src/typeConstraints.js","../src/types/ObjectTypeProperty.js","../src/types/ObjectTypeIndexer.js","../src/types/ObjectTypeCallProperty.js","../src/types/ObjectType.js","../src/types/IntersectionType.js","../src/types/MixedType.js","../src/types/TypeAlias.js","../src/types/NullLiteralType.js","../src/types/VoidType.js","../src/types/NullableType.js","../src/types/NumericLiteralType.js","../src/types/NumberType.js","../src/types/PartialType.js","../src/types/ParameterizedTypeAlias.js","../src/types/ParameterizedFunctionType.js","../src/types/RefinementType.js","../src/types/StringLiteralType.js","../src/types/StringType.js","../src/types/SymbolLiteralType.js","../src/types/SymbolType.js","../src/types/ThisType.js","../src/types/TypeBox.js","../src/types/TypeReference.js","../src/types/TypeTDZ.js","../src/types/UnionType.js","../src/registerPrimitiveTypes.js","../src/registerBuiltins.js","../src/registerTypePredicates.js","../src/TypeInferrer.js","../src/makeReactPropTypes.js","../src/errorReporting/makeWarningMessage.js","../src/makeUnion.js","../src/classDecorators.js","../src/annotateValue.js","../src/declarations/Declaration.js","../src/declarations/VarDeclaration.js","../src/declarations/TypeDeclaration.js","../src/declarations/ModuleDeclaration.js","../src/declarations/ModuleExportsDeclaration.js","../src/declarations/ClassDeclaration.js","../src/declarations/ParameterizedClassDeclaration.js","../src/declarations/ExtendsDeclaration.js","../src/flowTypes/$DiffType.js","../src/flowTypes/$FlowFixMeType.js","../src/flowTypes/$KeysType.js","../src/flowTypes/$ObjMapiType.js","../src/flowTypes/$ObjMapType.js","../src/flowTypes/$PropertyType.js","../src/flowTypes/$ShapeType.js","../src/flowTypes/$SubType.js","../src/flowTypes/$SuperType.js","../src/flowTypes/$TupleMapType.js","../src/flowTypes/ClassType.js","../src/TypeContext.js","../src/globalContext.js","../src/index.cjs.js"],"sourcesContent":["/* @flow */\n\n/**\n * This file exports a dictionary of global primitive types that are shared by all contexts.\n * It is populated in [registerPrimitiveTypes()](./registerPrimitiveTypes.js).\n */\n\nimport type {\n  Type,\n  NullLiteralType,\n  NumberType,\n  BooleanType,\n  SymbolType,\n  StringType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  VoidType\n} from './types';\n\n\n/**\n * Covers our builtin types and makes room for future ones.\n */\ntype PrimitiveTypes = {\n  null: NullLiteralType;\n  empty: EmptyType;\n  number: NumberType;\n  boolean: BooleanType;\n  string: StringType;\n  symbol: SymbolType;\n  any: AnyType;\n  mixed: MixedType;\n  void: VoidType;\n  existential: ExistentialType;\n\n  [name: string]: Type<any>;\n};\n\nconst primitiveTypes: any = {};\n\n(primitiveTypes: PrimitiveTypes);\n\nexport default primitiveTypes;","/* @flow */\n\nimport {stringifyPath, resolvePath} from '../Validation';\nimport type Validation from '../Validation';\n\nexport default function makeJSONError <T> (validation: Validation<T>) {\n  if (!validation.hasErrors()) {\n    return;\n  }\n  const {input, context} = validation;\n  const errors = [];\n  for (const [path, message, expectedType] of validation.errors) {\n    const expected = expectedType ? expectedType.toString() : null;\n    const actual = context.typeOf(resolvePath(input, path)).toString();\n    const field = stringifyPath(validation.path.concat(path));\n\n    const pointer = `/${path.join('/')}`;\n\n    errors.push({\n      pointer,\n      field,\n      message,\n      expected,\n      actual\n    });\n  }\n  return errors;\n}\n","/* @flow */\n\nimport type Type from './types/Type';\n\n// Tracks whether we're in validation of cyclic objects.\nconst cyclicValidation = new WeakMap();\n// Tracks whether we're toString() of cyclic objects.\nconst cyclicToString = new WeakSet();\n\nexport function inValidationCycle (type: Type<any>, input: any): boolean {\n  try {\n    const tracked = cyclicValidation.get(type);\n    if (!tracked) {\n      return false;\n    }\n    else {\n      return weakSetHas(tracked, input);\n    }\n  }\n  catch (e) {\n    // some exotic values cannot be checked\n    return true;\n  }\n}\n\nexport function startValidationCycle (type: Type<any>, input: any) {\n  let tracked = cyclicValidation.get(type);\n  if (!tracked) {\n    tracked = new WeakSet();\n    cyclicValidation.set(type, tracked);\n  }\n  weakSetAdd(tracked, input);\n}\n\nexport function endValidationCycle (type: Type<any>, input: any) {\n  const tracked = cyclicValidation.get(type);\n  if (tracked) {\n    weakSetDelete(tracked, input);\n  }\n}\n\nexport function inToStringCycle (type: Type<any>): boolean {\n  return cyclicToString.has(type);\n}\n\nexport function startToStringCycle (type: Type<any>) {\n  cyclicToString.add(type);\n}\n\nexport function endToStringCycle (type: Type<any>) {\n  cyclicToString.delete(type);\n}\n\n\nexport function weakSetHas <V: any> (weakset: WeakSet<V>, value: V): boolean {\n  try {\n    return weakset.has(value);\n  }\n  catch (e) {\n    return true;\n  }\n}\n\n\nexport function weakSetAdd <V: any> (weakset: WeakSet<V>, value: V) {\n  try {\n    weakset.add(value);\n  }\n  catch (e) {}\n}\n\n\nexport function weakSetDelete <V: any> (weakset: WeakSet<V>, value: V) {\n  try {\n    weakset.delete(value);\n  }\n  catch (e) {}\n}","/* @flow */\nimport makeJSONError from './errorReporting/makeJSONError';\n\nimport {weakSetHas, weakSetAdd, weakSetDelete} from './cyclic';\n\nimport type TypeContext from './TypeContext';\nimport type Type from './types/Type';\n\nexport type IdentifierPath = Array<string | number>;\nexport type ErrorTuple = [IdentifierPath, string, Type<any>];\n\nexport type ValidationJSON<T> = {\n  input: T;\n  errors: Array<{\n    pointer: string;\n    message: string;\n    expected: Type<any>;\n    actual: Type<any>;\n  }>\n};\n\nconst validIdentifierOrAccessor = /^[$A-Z_][0-9A-Z_$[\\].]*$/i;\n\n\nexport default class Validation<T> {\n\n  context: TypeContext;\n\n  input: T;\n\n  path: string[] = [];\n\n  prefix: string = '';\n\n  errors: ErrorTuple[] = [];\n\n  // Tracks whether we're in validation of cyclic objects.\n  cyclic: WeakMap<Type<any>, WeakSet<any>> = new WeakMap();\n\n  constructor (context: TypeContext, input: T) {\n    this.context = context;\n    this.input = input;\n  }\n\n  inCycle (type: Type<any>, input: any): boolean {\n    const tracked = this.cyclic.get(type);\n    if (!tracked) {\n      return false;\n    }\n    else {\n      return weakSetHas(tracked, input);\n    }\n  }\n\n  startCycle (type: Type<any>, input: any) {\n    let tracked = this.cyclic.get(type);\n    if (!tracked) {\n      tracked = new WeakSet();\n      this.cyclic.set(type, tracked);\n    }\n    weakSetAdd(tracked, input);\n  }\n\n  endCycle (type: Type<any>, input: any) {\n    const tracked = this.cyclic.get(type);\n    if (tracked) {\n      weakSetDelete(tracked, input);\n    }\n  }\n\n  hasErrors (path: ? IdentifierPath): boolean {\n    if (path) {\n      for (const [candidate] of this.errors) {\n        if (matchPath(path, candidate)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    else {\n      return this.errors.length > 0;\n    }\n  }\n\n  addError (path: IdentifierPath, expectedType: Type<any>, message: string): this {\n    this.errors.push([path, message, expectedType]);\n    return this;\n  }\n\n  clearError (path: ? IdentifierPath): boolean {\n    let didClear = false;\n    if (path) {\n      const errors = [];\n      for (const error of this.errors) {\n        if (matchPath(path, error[0])) {\n          didClear = true;\n        }\n        else {\n          errors.push(error);\n        }\n      }\n      this.errors = errors;\n    }\n    else {\n      didClear = this.errors.length > 0;\n      this.errors = [];\n    }\n    return didClear;\n  }\n\n  resolvePath (path: IdentifierPath): any {\n    return resolvePath(this.input, path);\n  }\n\n  toJSON (): * {\n    return makeJSONError(this);\n  }\n\n}\n\nexport function stringifyPath (path: IdentifierPath): string {\n  if (!path.length) {\n    return 'Value';\n  }\n  const {length} = path;\n  const parts = new Array(length);\n  for (let i = 0; i < length; i++) {\n    const part = path[i];\n    if (part === '[[Return Type]]') {\n      parts[i] = 'Return Type';\n    }\n    else if (typeof part !== 'string' || !validIdentifierOrAccessor.test(part)) {\n      parts[i] = `[${String(part)}]`;\n    }\n    else if (i > 0) {\n      parts[i] = `.${String(part)}`;\n    }\n    else {\n      parts[i] = String(part);\n    }\n  }\n  return parts.join('');\n}\n\nexport function resolvePath (input: any, path: IdentifierPath): any {\n  let subject = input;\n  const {length} = path;\n  for (let i = 0; i < length; i++) {\n    if (subject == null) {\n      return undefined;\n    }\n    const part = path[i];\n    if (part === '[[Return Type]]') {\n      continue;\n    }\n    if (subject instanceof Map) {\n      subject = subject.get(part);\n    }\n    else {\n      subject = subject[part];\n    }\n  }\n  return subject;\n}\n\nexport function matchPath (path: IdentifierPath, candidate: IdentifierPath): boolean {\n  const {length} = path;\n  if (length > candidate.length) {\n    return false;\n  }\n  for (let i = 0; i < length; i++) {\n    if (candidate[i] !== path[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n","/* @flow */\n\nexport default class RuntimeTypeError extends TypeError {\n  name: string = \"RuntimeTypeError\";\n}","/* @flow */\nimport {stringifyPath, resolvePath} from '../Validation';\n\nimport type Validation from '../Validation';\n\nimport RuntimeTypeError from './RuntimeTypeError';\n\nconst delimiter = '\\n-------------------------------------------------\\n\\n';\n\nexport default function makeTypeError <T> (validation: Validation<T>) {\n  if (!validation.hasErrors()) {\n    return;\n  }\n  const {prefix, input, context} = validation;\n  const collected = [];\n  for (const [path, message, expectedType] of validation.errors) {\n    const expected = expectedType ? expectedType.toString() : \"*\";\n    const actual = context.typeOf(resolvePath(input, path)).toString();\n\n    const field = stringifyPath(validation.path.concat(path));\n\n\n    collected.push(\n      `${field} ${message}\\n\\nExpected: ${expected}\\n\\nActual: ${actual}\\n`\n    );\n  }\n  if (prefix) {\n    return new RuntimeTypeError(`${prefix.trim()} ${collected.join(delimiter)}`);\n  }\n  else {\n    return new RuntimeTypeError(collected.join(delimiter));\n  }\n}\n","/* @flow */\n\nimport type {Type} from './types';\nimport makeTypeError from './errorReporting/makeTypeError';\n\nexport default function makeError (expected: Type<any>, input: any): ? TypeError {\n  const {context} = expected;\n  const validation = context.validate(expected, input);\n  return makeTypeError(validation);\n}\n","/* @flow */\n\nimport type Type from './types/Type';\n\nimport {\n  AnyType,\n  ExistentialType,\n  TypeParameter,\n  FlowIntoType,\n  MixedType,\n  TypeAlias\n} from './types';\n\n/**\n * Given two types, A and B, compare them and return either -1, 0, or 1:\n *\n *   -1 if A cannot accept type B.\n *\n *    0 if the types are effectively identical.\n *\n *    1 if A accepts every possible B.\n */\nexport default function compareTypes (a: Type<any>, b: Type<any>): -1 | 0 | 1 {\n\n  if (a === b) {\n    return 0;\n  }\n\n  if (b instanceof TypeAlias || b instanceof TypeParameter) {\n    b = b.unwrap();\n  }\n\n  if (a instanceof TypeAlias) {\n    return a.compareWith(b);\n  }\n\n  if (a instanceof FlowIntoType || a instanceof TypeParameter || b instanceof FlowIntoType) {\n    return a.compareWith(b);\n  }\n  else if (a instanceof AnyType || a instanceof ExistentialType || a instanceof MixedType) {\n    return 1;\n  }\n  else {\n    return a.compareWith(b);\n  }\n}\n","/* @flow */\n\nimport makeError from '../makeError';\nimport compareTypes from '../compareTypes';\n\nimport type TypeContext from '../TypeContext';\n\nimport Validation from '../Validation';\nimport type {ErrorTuple, IdentifierPath} from '../Validation';\n\n/**\n * # Type\n *\n * This is the base class for all types.\n */\nexport default class Type <T> {\n  typeName: string = 'Type';\n  context: TypeContext;\n\n  constructor (context: TypeContext) {\n    this.context = context;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n  }\n\n  accepts (input: any): boolean {\n    const validation = new Validation(this.context, input);\n    for (const error of this.errors(validation, [], input)) { // eslint-disable-line no-unused-vars\n      return false;\n    }\n    return true;\n  }\n\n  acceptsType (input: Type<any>): boolean {\n    if (compareTypes(this, input) === -1) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return -1;\n  }\n\n  assert <V: T> (input: V): V {\n    const error = makeError(this, input);\n    if (error) {\n      if (typeof Error.captureStackTrace === 'function') {\n        Error.captureStackTrace(error, this.assert);\n      }\n      throw error;\n    }\n    return input;\n  }\n\n  /**\n   * Get the inner type.\n   */\n  unwrap (): Type<T> {\n    return this;\n  }\n\n  toString () {\n    return '$Type';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class AnyType extends Type<any> {\n  typeName: string = 'AnyType';\n\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return 1;\n  }\n\n  toString (): string {\n    return 'any';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nconst errorMessages = {\n  ERR_CONSTRAINT_VIOLATION: 'violated a constraint',\n  ERR_EXPECT_ARRAY: 'must be an Array',\n  ERR_EXPECT_TRUE: 'must be true',\n  ERR_EXPECT_FALSE: 'must be false',\n  ERR_EXPECT_BOOLEAN: 'must be true or false',\n  ERR_EXPECT_EMPTY: 'must be empty',\n  ERR_EXPECT_EXACT_VALUE: 'must be exactly $0',\n  ERR_EXPECT_CALLABLE: 'must be callable',\n  ERR_EXPECT_CLASS: 'must be a Class of $0',\n  ERR_EXPECT_FUNCTION: 'must be a function',\n  ERR_EXPECT_GENERATOR: 'must be a generator function',\n  ERR_EXPECT_ITERABLE: 'must be iterable',\n  ERR_EXPECT_ARGUMENT: 'argument \"$0\" must be: $1',\n  ERR_EXPECT_RETURN: 'expected return type of: $0',\n  ERR_EXPECT_N_ARGUMENTS: 'requires $0 argument(s)',\n  ERR_EXPECT_INSTANCEOF: 'must be an instance of $0',\n  ERR_EXPECT_KEY_TYPE: 'keys must be: $0',\n  ERR_EXPECT_NULL: 'must be null',\n  ERR_EXPECT_NUMBER: 'must be a number',\n  ERR_EXPECT_OBJECT: 'must be an object',\n  ERR_EXPECT_PROMISE: 'must be promise of $0',\n  ERR_EXPECT_STRING: 'must be a string',\n  ERR_EXPECT_SYMBOL: 'must be a symbol',\n  ERR_EXPECT_THIS: 'must be exactly this',\n  ERR_EXPECT_VOID: 'must be undefined',\n  ERR_INVALID_DATE: 'must be a valid date',\n  ERR_NO_INDEXER: 'is not one of the permitted indexer types',\n  ERR_NO_UNION: 'must be one of: $0',\n  ERR_UNKNOWN_KEY: 'should not contain the key: \"$0\"'\n};\n\nexport type ErrorKey = $Keys<typeof errorMessages>;\n\nexport default errorMessages;","/* @flow */\n\nimport errorMessages from './errorMessages';\nimport type {ErrorKey} from './errorMessages';\n\n\nexport default function getErrorMessage (key: ErrorKey, ...params: any[]): string {\n  const message = errorMessages[key];\n  if (params.length > 0) {\n    return message.replace(/\\$(\\d+)/g, (m, i) => String(params[i]));\n  }\n  else {\n    return message;\n  }\n}\n\n\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class TupleType<T> extends Type {\n  typeName: string = 'TupleType';\n  types: Type<T>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {types} = this;\n    const {length} = types;\n    const {context} = this;\n    if (!context.checkPredicate('Array', input)) {\n      yield [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];\n      return;\n    }\n    for (let i = 0; i < length; i++) {\n      yield* types[i].errors(validation, path.concat(i), input[i]);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {types} = this;\n    const {length} = types;\n    const {context} = this;\n\n    if (!context.checkPredicate('Array', input) || input.length < length) {\n      return false;\n    }\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (!type.accepts(input[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof TupleType)) {\n      return -1;\n    }\n    const types = this.types;\n    const inputTypes = input.types;\n    if (inputTypes.length < types.length) {\n      return -1;\n    }\n    let isGreater = false;\n    for (let i = 0; i < types.length; i++) {\n      const result = compareTypes(types[i], inputTypes[i]);\n      if (result === 1) {\n        isGreater = true;\n      }\n      else if (result === -1) {\n        return -1;\n      }\n    }\n    if (types.length < inputTypes.length) {\n      return 0;\n    }\n    else if (isGreater) {\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n\n  toString (): string {\n    return `[${this.types.join(', ')}]`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      types: this.types\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport TupleType from './TupleType';\nimport compareTypes from '../compareTypes';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {\n  inValidationCycle,\n  startValidationCycle,\n  endValidationCycle,\n  inToStringCycle,\n  startToStringCycle,\n  endToStringCycle\n} from '../cyclic';\n\nexport default class ArrayType <T> extends Type {\n  typeName: string = 'ArrayType';\n  elementType: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {context} = this;\n    if (!context.checkPredicate('Array', input)) {\n      yield [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];\n      return;\n    }\n    if (validation.inCycle(this, input)) {\n      return;\n    }\n    validation.startCycle(this, input);\n    const {elementType} = this;\n    const {length} = input;\n\n    for (let i = 0; i < length; i++) {\n      yield* elementType.errors(validation, path.concat(i), input[i]);\n    }\n    validation.endCycle(this, input);\n  }\n\n  accepts (input: any): boolean {\n    const {context} = this;\n    if (!context.checkPredicate('Array', input)) {\n      return false;\n    }\n    if (inValidationCycle(this, input)) {\n      return true;\n    }\n    startValidationCycle(this, input);\n    const {elementType} = this;\n    const {length} = input;\n    for (let i = 0; i < length; i++) {\n      if (!elementType.accepts(input[i])) {\n        endValidationCycle(this, input);\n        return false;\n      }\n    }\n    endValidationCycle(this, input);\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {elementType} = this;\n    if (input instanceof TupleType) {\n      const {types} = input;\n      for (let i = 0; i < types.length; i++) {\n        const result = compareTypes(elementType, types[i]);\n        if (result === -1) {\n          return -1;\n        }\n      }\n      return 1;\n    }\n    else if (input instanceof ArrayType) {\n      return compareTypes(elementType, input.elementType);\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    const {elementType} = this;\n    if (inToStringCycle(this)) {\n      if (typeof elementType.name === 'string') {\n        return `Array<$Cycle<${elementType.name}>>`;\n      }\n      else {\n        return `Array<$Cycle<Object>>`;\n      }\n    }\n    startToStringCycle(this);\n    const output = `Array<${elementType.toString()}>`;\n    endToStringCycle(this);\n    return output;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      elementType: this.elementType\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class BooleanLiteralType <T: boolean> extends Type {\n  typeName: string = 'BooleanLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input !== this.value) {\n      yield [path, getErrorMessage(this.value ? 'ERR_EXPECT_TRUE' : 'ERR_EXPECT_FALSE'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof BooleanLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return this.value ? 'true' : 'false';\n  }\n\n  toJSON () {\n    return {\n      type: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport BooleanLiteralType from './BooleanLiteralType';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class BooleanType extends Type {\n  typeName: string = 'BooleanType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'boolean') {\n      yield [path, getErrorMessage('ERR_EXPECT_BOOLEAN'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'boolean';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof BooleanLiteralType) {\n      return 1;\n    }\n    else if (input instanceof BooleanType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return 'boolean';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class EmptyType extends Type {\n  typeName: string = 'EmptyType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield [path, getErrorMessage('ERR_EXPECT_EMPTY'), this];\n  }\n\n  accepts (input: any): boolean {\n    return false; // empty types accepts nothing.\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof EmptyType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'empty';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n\nexport default class ExistentialType extends Type {\n  typeName: string = 'ExistentialType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return 1;\n  }\n\n  toString (): string {\n    return '*';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport FlowIntoType from './FlowIntoType';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nconst FlowIntoSymbol = Symbol('FlowInto');\n\n/**\n * # TypeParameter\n *\n * Type parameters allow polymorphic type safety.\n * The first time a type parameter is checked, it records the shape of its input,\n * this recorded shape is used to check all future inputs for this particular instance.\n */\nexport default class TypeParameter<T> extends Type {\n  typeName: string = 'TypeParameter';\n  id: string;\n  bound: ? Type<T>;\n  default: ? Type<T>;\n\n  recorded: ? Type<T>;\n\n  // @flowIssue 252\n  [FlowIntoSymbol]: ? FlowIntoType = null;\n\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded, context} = this;\n\n    if (boundOrDefault instanceof FlowIntoType) {\n      // We defer to the other type parameter so that values from this\n      // one can flow \"upwards\".\n      yield* boundOrDefault.errors(validation, path, input);\n      return;\n    }\n    else if (recorded) {\n      // we've already recorded a value for this type parameter\n      yield* recorded.errors(validation, path, input);\n      return;\n    }\n    else if (boundOrDefault) {\n      if (boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType') {\n        return;\n      }\n      else {\n        let hasErrors = false;\n        for (const error of boundOrDefault.errors(validation, path, input)) {\n          hasErrors = true;\n          yield error;\n        }\n        if (hasErrors) {\n          return;\n        }\n      }\n    }\n\n    this.recorded = context.typeOf(input);\n  }\n\n  accepts (input: any): boolean {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded, context} = this;\n    if (boundOrDefault instanceof FlowIntoType) {\n      // We defer to the other type parameter so that values from this\n      // one can flow \"upwards\".\n      return boundOrDefault.accepts(input);\n    }\n    else if (recorded) {\n      return recorded.accepts(input);\n    }\n    else if (boundOrDefault) {\n      if (boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType') {\n        return true;\n      }\n      else if (!boundOrDefault.accepts(input)) {\n        return false;\n      }\n    }\n\n    this.recorded = context.typeOf(input);\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded} = this;\n    if (input instanceof TypeParameter) {\n      // We don't need to check for `recorded` or `bound` fields\n      // because the input has already been unwrapped, so\n      // if we got a type parameter it must be totally generic and\n      // we treat it like Any.\n      return 1;\n    }\n    else if (recorded) {\n      return compareTypes(recorded, input);\n    }\n    else if (boundOrDefault) {\n      return compareTypes(boundOrDefault, input);\n    }\n    else {\n      // A generic type parameter accepts any input.\n      return 1;\n    }\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    const boundOrDefault = this.bound || this.default;\n    const {recorded} = this;\n    if (recorded) {\n      return recorded.unwrap();\n    }\n    else if (boundOrDefault) {\n      return boundOrDefault.unwrap();\n    }\n    else {\n      return this;\n    }\n  }\n\n  toString (withBinding?: boolean): string {\n    const {id, bound, default: defaultType} = this;\n    if (withBinding) {\n      if (defaultType) {\n        return `${id} = ${defaultType.toString()}`;\n      }\n      else if (bound) {\n        return `${id}: ${bound.toString()}`;\n      }\n    }\n    return id;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      id: this.id,\n      bound: this.bound,\n      recorded: this.recorded\n    };\n  }\n}\n\nexport function flowIntoTypeParameter <T> (typeParameter: TypeParameter<T>): FlowIntoType<T> {\n  const existing: ? FlowIntoType<T> = (typeParameter: $FlowIssue<252>)[FlowIntoSymbol];\n  if (existing) {\n    return existing;\n  }\n\n  const target = new FlowIntoType(typeParameter.context);\n  target.typeParameter = typeParameter;\n  (typeParameter: $FlowIssue<252>)[FlowIntoSymbol] = target;\n  return target;\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameter from './TypeParameter';\n\n/**\n * # FlowIntoType\n *\n * A virtual type which allows types it receives to \"flow\" upwards into a type parameter.\n * The type parameter will become of a union of any types seen by this instance.\n */\nexport default class FlowIntoType<T: any> extends Type {\n  typeName: string = 'FlowIntoType';\n\n  typeParameter: TypeParameter<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {typeParameter, context} = this;\n\n    const {recorded, bound} = typeParameter;\n\n    if (bound instanceof FlowIntoType) {\n      // We defer to the other type so that values from this\n      // one can flow \"upwards\".\n      yield* bound.errors(validation, path, input);\n      return;\n    }\n    if (recorded) {\n      // we've already recorded a value for this type parameter\n      if (bound) {\n        let hasError = false;\n        for (const error of bound.errors(validation, path, input)) {\n          yield error;\n          hasError = true;\n        }\n        if (hasError) {\n          return;\n        }\n      }\n      else if (recorded.accepts(input)) {\n        // our existing type already permits this value, there's nothing to do.\n        return;\n      }\n      else {\n        // we need to make a union\n        typeParameter.recorded = context.union(recorded, context.typeOf(input));\n        return;\n      }\n    }\n    else if (bound) {\n      if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {\n        return;\n      }\n      else {\n        let hasError = false;\n        for (const error of bound.errors(validation, path, input)) {\n          yield error;\n          hasError = true;\n        }\n        if (hasError) {\n          return;\n        }\n      }\n    }\n\n    typeParameter.recorded = context.typeOf(input);\n  }\n\n  accepts (input: any): boolean {\n    const {typeParameter, context} = this;\n\n    const {recorded, bound} = typeParameter;\n\n    if (bound instanceof FlowIntoType) {\n      // We defer to the other type so that values from this\n      // one can flow \"upwards\".\n      return bound.accepts(input);\n    }\n    if (recorded) {\n      // we've already recorded a value for this type parameter\n      if (bound && !bound.accepts(input)) {\n        return false;\n      }\n      else if (recorded.accepts(input)) {\n        // our existing type already permits this value, there's nothing to do.\n        return true;\n      }\n      else {\n        // we need to make a union\n        typeParameter.recorded = context.union(recorded, context.typeOf(input));\n        return true;\n      }\n    }\n    else if (bound) {\n      if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {\n        return true;\n      }\n      else if (!bound.accepts(input)) {\n        return false;\n      }\n    }\n\n    typeParameter.recorded = context.typeOf(input);\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {typeParameter, context} = this;\n\n    const {recorded, bound} = typeParameter;\n    if (bound instanceof FlowIntoType) {\n      // We defer to the other type so that values from this\n      // one can flow \"upwards\".\n      return bound.compareWith(input);\n    }\n    if (recorded) {\n      if (bound && compareTypes(bound, input) === -1) {\n        return -1;\n      }\n      const result = compareTypes(recorded, input);\n      if (result === 0) {\n        // our existing type already permits this value, there's nothing to do.\n        return 0;\n      }\n      // we need to make a union\n      typeParameter.recorded = context.union(recorded, input);\n      return 1;\n    }\n    else if (bound) {\n      if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {\n        return 1;\n      }\n      const result = compareTypes(bound, input);\n      if (result === -1) {\n        return -1;\n      }\n    }\n\n    typeParameter.recorded = input;\n    return 0;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.typeParameter.unwrap();\n  }\n\n  toString (withBinding?: boolean): string {\n    return this.typeParameter.toString(withBinding);\n  }\n\n  toJSON () {\n    return this.typeParameter.toJSON();\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class FunctionTypeParam<T> extends Type {\n  typeName: string = 'FunctionTypeParam';\n  name: string;\n  optional: boolean;\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {optional, type} = this;\n    if (optional && input === undefined) {\n      return;\n    }\n    else {\n      yield* type.errors(validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {optional, type} = this;\n    if (optional && input === undefined) {\n      return true;\n    }\n    else {\n      return type.accepts(input);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof FunctionTypeParam) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      return compareTypes(this.type, input);\n    }\n  }\n\n  toString (): string {\n    const {optional, type} = this;\n    return `${this.name}${optional ? '?' : ''}: ${type.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name,\n      optional: this.optional,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport FunctionTypeParam from './FunctionTypeParam';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class FunctionTypeRestParam<T> extends Type {\n  typeName: string = 'FunctionTypeRestParam';\n  name: string;\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    yield* type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    return type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      const result = compareTypes(this.type, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n\n  toString (): string {\n    const {type} = this;\n    return `...${this.name}: ${type.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n\nexport default class FunctionTypeReturn<T> extends Type {\n  typeName: string = 'FunctionTypeReturn';\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    yield* type.errors(validation, path.concat('[[Return Type]]'), input);\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    return type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof FunctionTypeReturn) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      const result = compareTypes(this.type, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n\n  unwrap (): Type<T> {\n    return this.type;\n  }\n\n  toString (): string {\n    const {type} = this;\n    return type.toString();\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nexport const ParentSymbol = Symbol('Parent');\nexport const NameRegistrySymbol = Symbol('NameRegistry');\nexport const ModuleRegistrySymbol = Symbol('ModuleRegistry');\nexport const CurrentModuleSymbol = Symbol('CurrentModule');\nexport const TypeConstructorRegistrySymbol = Symbol('TypeConstructorRegistry');\nexport const InferrerSymbol = Symbol('Inferrer');\nexport const TraverseValueSymbol = Symbol('TraverseValue');\nexport const TraverseTypeSymbol = Symbol('TraverseType');\nexport const TypeSymbol = Symbol('Type');\nexport const TypeParametersSymbol = Symbol('TypeParameters');\nexport const TypePredicateRegistrySymbol = Symbol('TypePredicateRegistry');\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport FunctionTypeParam from './FunctionTypeParam';\nimport FunctionTypeRestParam from './FunctionTypeRestParam';\nimport FunctionTypeReturn from './FunctionTypeReturn';\nimport EmptyType from './EmptyType';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {TypeSymbol} from '../symbols';\n\nexport default class FunctionType<P, R> extends Type {\n  typeName: string = 'FunctionType';\n  params: FunctionTypeParam<P>[] = [];\n  rest: ? FunctionTypeRestParam<P>;\n  returnType: FunctionTypeReturn<R>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'function') {\n      yield [path, getErrorMessage('ERR_EXPECT_FUNCTION'), this];\n      return;\n    }\n    const annotation = input[TypeSymbol];\n    const {returnType, params} = this;\n    if (annotation) {\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        const annotationParam = annotation.params[i];\n        if (!annotationParam && !param.optional) {\n          yield [\n            path,\n            getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()),\n            this\n          ];\n        }\n        else if (!param.acceptsType(annotationParam)) {\n          yield [\n            path,\n            getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()),\n            this\n          ];\n        }\n      }\n      if (!returnType.acceptsType(annotation.returnType)) {\n        yield [\n          path,\n          getErrorMessage('ERR_EXPECT_RETURN', returnType.toString()),\n          this\n        ];\n      }\n    }\n    else {\n      const {context} = this;\n      // We cannot safely check an unannotated function.\n      // But we need to propagate `any` type feedback upwards.\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        param.acceptsType(context.any());\n      }\n      returnType.acceptsType(context.any());\n    }\n  }\n\n  accepts (input: any): boolean {\n    if (typeof input !== 'function') {\n      return false;\n    }\n    const {returnType, params} = this;\n    const annotation = input[TypeSymbol];\n    if (annotation) {\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        const annotationParam = annotation.params[i];\n        if (!annotationParam && !param.optional) {\n          return false;\n        }\n        else if (!param.acceptsType(annotationParam)) {\n          return false;\n        }\n      }\n      if (!returnType.acceptsType(annotation.returnType)) {\n        return false;\n      }\n      return true;\n    }\n    else {\n      const {context} = this;\n      // We cannot safely check an unannotated function.\n      // But we need to propagate `any` type feedback upwards.\n      for (let i = 0; i < params.length; i++) {\n        const param = params[i];\n        param.acceptsType(context.any());\n      }\n      returnType.acceptsType(context.any());\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof FunctionType)) {\n      return -1;\n    }\n    const returnType = this.returnType;\n    const inputReturnType = input.returnType;\n    let isGreater = false;\n    const returnTypeResult = compareTypes(returnType, inputReturnType);\n    if (returnTypeResult === -1) {\n      return -1;\n    }\n    else if (returnTypeResult === 1) {\n      isGreater = true;\n    }\n\n    const params = this.params;\n    const inputParams = input.params;\n    if (inputParams.length < params.length) {\n      return -1;\n    }\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const inputParam = inputParams[i];\n      const result = compareTypes(param, inputParam);\n      if (result === -1) {\n        return -1;\n      }\n      else if (result === 1) {\n        isGreater = true;\n      }\n    }\n    return isGreater ? 1 : 0;\n  }\n\n  acceptsParams (...args: any[]): boolean {\n    const {params, rest} = this;\n    const paramsLength = params.length;\n    const argsLength = args.length;\n    for (let i = 0; i < paramsLength; i++) {\n      const param = params[i];\n      if (i < argsLength) {\n        if (!param.accepts(args[i])) {\n          return false;\n        }\n      }\n      else if (!param.accepts(undefined)) {\n        return false;\n      }\n    }\n\n    if (argsLength > paramsLength && rest) {\n      for (let i = paramsLength; i < argsLength; i++) {\n        if (!rest.accepts(args[i])) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  acceptsReturn (input: any): boolean {\n    return this.returnType.accepts(input);\n  }\n\n  assertParams (...args: any[]): P[] {\n    const {params, rest} = this;\n    const paramsLength = params.length;\n    const argsLength = args.length;\n    for (let i = 0; i < paramsLength; i++) {\n      const param = params[i];\n      if (i < argsLength) {\n        param.assert(args[i]);\n      }\n      else {\n        param.assert(undefined);\n      }\n    }\n\n    if (argsLength > paramsLength && rest) {\n      for (let i = paramsLength; i < argsLength; i++) {\n        rest.assert(args[i]);\n      }\n    }\n\n    return args;\n  }\n\n  assertReturn <T> (input: any): T {\n    this.returnType.assert(input);\n    return input;\n  }\n\n  invoke (...args: Type<P>[]): Type<R> | EmptyType {\n    const {params, rest, context} = this;\n    const paramsLength = params.length;\n    const argsLength = args.length;\n    for (let i = 0; i < paramsLength; i++) {\n      const param = params[i];\n      if (i < argsLength) {\n        if (!param.acceptsType(args[i])) {\n          return context.empty();\n        }\n      }\n      else if (!param.accepts(undefined)) {\n        return context.empty();\n      }\n    }\n\n    if (argsLength > paramsLength && rest) {\n      for (let i = paramsLength; i < argsLength; i++) {\n        if (!rest.acceptsType(args[i])) {\n          return context.empty();\n        }\n      }\n    }\n\n    return this.returnType.type;\n  }\n\n  toString (): string {\n    const {params, rest, returnType} = this;\n    const args = [];\n    for (let i = 0; i < params.length; i++) {\n      args.push(params[i].toString());\n    }\n    if (rest) {\n      args.push(rest.toString());\n    }\n    return `(${args.join(', ')}) => ${returnType.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      params: this.params,\n      rest: this.rest,\n      returnType: this.returnType\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class GeneratorType<Y, R, N> extends Type {\n  typeName: string = 'GeneratorType';\n  yieldType: Type<Y>;\n  returnType: Type<R>;\n  nextType: Type<N>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const isValid = input\n      && typeof input.next === 'function'\n      && typeof input.return === 'function'\n      && typeof input.throw === 'function'\n      ;\n    if (!isValid) {\n      yield [path, getErrorMessage('ERR_EXPECT_GENERATOR'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input\n      && typeof input.next === 'function'\n      && typeof input.return === 'function'\n      && typeof input.throw === 'function'\n      ;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof GeneratorType)) {\n      const result = compareTypes(this.yieldType, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n    let isGreater = false;\n    let result = compareTypes(this.yieldType, input.yieldType);\n    if (result === -1) {\n      return -1;\n    }\n    else if (result === 1) {\n      isGreater = true;\n    }\n\n    result = compareTypes(this.returnType, input.returnType);\n    if (result === -1) {\n      return -1;\n    }\n    else if (result === 1) {\n      isGreater = true;\n    }\n\n    result = compareTypes(this.nextType, input.nextType);\n    if (result === -1) {\n      return -1;\n    }\n    else if (result === 1) {\n      isGreater = true;\n    }\n\n    return isGreater ? 1 : 0;\n  }\n\n  acceptsYield (input: any): boolean {\n    return this.yieldType.accepts(input);\n  }\n\n  acceptsReturn (input: any): boolean {\n    return this.returnType.accepts(input);\n  }\n\n  acceptsNext (input: any): boolean {\n    return this.nextType.accepts(input);\n  }\n\n  assertYield (input: Y): Y {\n    return this.yieldType.assert(input);\n  }\n\n  assertReturn (input: R): R {\n    return this.returnType.assert(input);\n  }\n\n  assertNext (input: N): N {\n    return this.nextType.assert(input);\n  }\n\n  toString (): string {\n    const {yieldType, returnType, nextType} = this;\n    return `Generator<${yieldType.toString()}, ${returnType.toString()}, ${nextType.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      yieldType: this.yieldType,\n      returnType: this.returnType,\n      nextType: this.nextType\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type {ApplicableType} from './';\n\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\n/**\n * # TypeParameterApplication\n *\n */\nexport default class TypeParameterApplication<X, T> extends Type {\n  typeName: string = 'TypeParameterApplication';\n  parent: ApplicableType<T>;\n  typeInstances: Type<X>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {parent, typeInstances} = this;\n    yield* parent.errors(validation, path, input, ...typeInstances);\n  }\n\n  accepts (input: any): boolean {\n    const {parent, typeInstances} = this;\n    return parent.accepts(input, ...typeInstances);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.parent, input);\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.parent;\n    if (inner && typeof (inner: $FlowIgnore).hasProperty === 'function') {\n      return (inner: $FlowIgnore).hasProperty(name, ...this.typeInstances);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.parent;\n    if (inner && typeof (inner: $FlowIgnore).getProperty === 'function') {\n      return (inner: $FlowIgnore).getProperty(name, ...this.typeInstances);\n    }\n  }\n\n  toString (): string {\n    const {parent, typeInstances} = this;\n    const {name} = parent;\n    if (typeInstances.length) {\n      const items = [];\n      for (let i = 0; i < typeInstances.length; i++) {\n        const typeInstance = typeInstances[i];\n        items.push(typeInstance.toString());\n      }\n      return `${name}<${items.join(', ')}>`;\n    }\n    else {\n      return name;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      typeInstances: this.typeInstances\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport type {Constructor} from './';\n\nimport TypeParameterApplication from './TypeParameterApplication';\n\nconst warnedInstances = new WeakSet();\n\nexport default class TypeConstructor<T> extends Type {\n  typeName: string = 'TypeConstructor';\n  name: string;\n  impl: ? Constructor<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n  }\n\n  accepts <P> (input: any, ...typeInstances: Type<P>[]): boolean {\n    const {context, name} = this;\n    if (!warnedInstances.has(this)) {\n      context.emitWarningMessage(`TypeConstructor ${name} does not implement accepts().`);\n      warnedInstances.add(this);\n    }\n    return false;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {context, name} = this;\n    if (!warnedInstances.has(this)) {\n      context.emitWarningMessage(`TypeConstructor ${name} does not implement compareWith().`);\n      warnedInstances.add(this);\n    }\n    return -1;\n  }\n\n  inferTypeParameters <P> (input: any): Type<P>[] {\n    return [];\n  }\n\n  apply <P> (...typeInstances: Type<P>[]): TypeParameterApplication<P, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): TypeConstructor<T> {\n    return this;\n  }\n\n  toString (): string {\n    return this.name;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name\n    };\n  }\n\n}\n","/* @flow */\n\nimport TypeConstructor from './TypeConstructor';\n\nimport type Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class GenericType extends TypeConstructor {\n\n  typeName: string = 'GenericType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {name, impl} = this;\n    if (!(input instanceof impl)) {\n      yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', name), this];\n    }\n  }\n\n  accepts <P> (input: any, ...typeInstances: Type<P>[]): boolean {\n    return input instanceof this.impl;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof GenericType && input.impl === this.impl) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  inferTypeParameters <P> (input: any): Type<P>[] {\n    return [];\n  }\n}","/* @flow */\n\nexport default function invariant (input: any, message: string): void {\n  if (!input) {\n    const error = new Error(message);\n    error.name = 'InvariantViolation';\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(error, invariant);\n    }\n    throw error;\n  }\n}","/* @flow */\n\nimport type {\n  Type,\n  TypeConstraint\n} from './types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from './Validation';\n\nexport type ConstrainableType<T> = Type<T> & {constraints: TypeConstraint[]};\n\n/**\n * Add constraints to the given subject type.\n */\nexport function addConstraints (subject: ConstrainableType<any>, ...constraints: TypeConstraint[]) {\n  subject.constraints.push(...constraints);\n}\n\n/**\n * Collect any errors from constraints on the given subject type.\n */\nexport function *collectConstraintErrors (subject: ConstrainableType<any>, validation: Validation<any>, path: IdentifierPath, ...input: any[]): Generator<ErrorTuple, void, void> {\n  const {constraints} = subject;\n  const {length} = constraints;\n  for (let i = 0; i < length; i++) {\n    const constraint = constraints[i];\n    const violation = constraint(...input);\n    if (typeof violation === 'string') {\n      yield [path, violation, this];\n    }\n  }\n}\n\n/**\n * Determine whether the input passes the constraints on the subject type.\n */\nexport function constraintsAccept (subject: ConstrainableType<any>, ...input: any[]): boolean {\n  const {constraints} = subject;\n  const {length} = constraints;\n  for (let i = 0; i < length; i++) {\n    const constraint = constraints[i];\n    if (typeof constraint(...input) === 'string') {\n      return false;\n    }\n  }\n  return true;\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport getErrorMessage from \"../getErrorMessage\";\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n\nexport default class ObjectTypeProperty<K: string | number, V> extends Type {\n  typeName: string = 'ObjectTypeProperty';\n  key: K;\n  value: Type<V>;\n  optional: boolean;\n  // @flowIgnore\n  'static': boolean = false;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): ObjectTypeProperty<K, V> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // @flowIgnore\n    const {optional, key, value, static: isStatic} = this;\n    let target;\n    let targetPath;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n        return;\n      }\n      targetPath = path.concat('constructor');\n      if (typeof input.constructor !== 'function') {\n        if (!optional) {\n          yield [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];\n        }\n        return;\n      }\n      targetPath.push(key);\n      target = input.constructor[key];\n    }\n    else {\n      target = input[key];\n      targetPath = path.concat(key);\n    }\n    if (optional && target === undefined) {\n      return;\n    }\n    let hasErrors = false;\n    for (const error of value.errors(validation, targetPath, target)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, targetPath, target);\n    }\n  }\n\n  accepts (input: Object): boolean {\n    // @flowIgnore\n    const {optional, key, value, static: isStatic} = this;\n    let target;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        return false;\n      }\n      if (typeof input.constructor !== 'function') {\n        return optional ? true : false;\n      }\n      target = input.constructor[key];\n    }\n    else {\n      target = input[key];\n    }\n\n    if (optional && target === undefined) {\n      return true;\n    }\n    else if (!value.accepts(target)) {\n      return false;\n    }\n    else {\n      return constraintsAccept(this, target);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ObjectTypeProperty)) {\n      return -1;\n    }\n    else if (input.key !== this.key) {\n      return -1;\n    }\n    else {\n      return compareTypes(this.value, input.value);\n    }\n  }\n\n  unwrap (): Type<V> {\n    return this.value.unwrap();\n  }\n\n  toString (): string {\n    let key = this.key;\n    // @flowIssue 252\n    if (typeof key === 'symbol') {\n      key = `[${key.toString()}]`;\n    }\n    if (this.static) {\n      return `static ${key}${this.optional ? '?' : ''}: ${this.value.toString()};`;\n    }\n    else {\n      return `${key}${this.optional ? '?' : ''}: ${this.value.toString()};`;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      key: this.key,\n      value: this.value,\n      optional: this.optional\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport ObjectTypeProperty from './ObjectTypeProperty';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ObjectTypeIndexer<K: string | number, V> extends Type {\n  typeName: string = 'ObjectTypeIndexer';\n  id: string;\n  key: Type<K>;\n  value: Type<V>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, key: any, value: any): Generator<ErrorTuple, void, void> {\n    // special case number types\n    if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {\n      key = +key;\n    }\n\n    yield* this.key.errors(validation, path.concat('[[Key]]'), key);\n    yield* this.value.errors(validation, path.concat(key), value);\n  }\n\n  accepts (value: any): boolean {\n    return this.value.accepts(value);\n  }\n\n  acceptsKey (key: any): boolean {\n    // special case number types\n    if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {\n      key = +key;\n    }\n    return this.key.accepts(key);\n  }\n\n  acceptsValue (value: any): boolean {\n    return this.value.accepts(value);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof ObjectTypeProperty) {\n      if (!this.key.accepts(input.key)) {\n        return -1;\n      }\n      else {\n        return compareTypes(this.value, input.value);\n      }\n    }\n    else if (!(input instanceof ObjectTypeIndexer)) {\n      return -1;\n    }\n\n    const keyResult = compareTypes(this.key, input.key);\n    if (keyResult === -1) {\n      return -1;\n    }\n    const valueResult = compareTypes(this.value, input.value);\n    if (valueResult === -1) {\n      return -1;\n    }\n\n    if (keyResult === 0 && valueResult === 0) {\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n\n  unwrap (): Type<V> {\n    return this.value.unwrap();\n  }\n\n  toString (): string {\n    return `[${this.id}: ${this.key.toString()}]: ${this.value.toString()};`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      id: this.id,\n      key: this.key,\n      value: this.value\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport getErrorMessage from \"../getErrorMessage\";\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ObjectTypeCallProperty<T: Function> extends Type {\n  typeName: string = 'ObjectTypeCallProperty';\n  value: Type<T>;\n  // @flowIgnore\n  'static': boolean = false;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // @flowIgnore\n    const {value, static: isStatic} = this;\n\n    let target;\n    let targetPath;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n        return;\n      }\n      targetPath = path.concat('constructor');\n      if (typeof input.constructor !== 'function') {\n        yield [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];\n        return;\n      }\n      target = input.constructor;\n    }\n    else {\n      target = input;\n      targetPath = path;\n    }\n    yield* value.errors(validation, targetPath, target);\n  }\n\n  accepts (input: any): boolean {\n    // @flowIgnore\n    const {value, static: isStatic} = this;\n    let target;\n    if (isStatic) {\n      if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n        return false;\n      }\n      if (typeof input.constructor !== 'function') {\n        return false;\n      }\n      target = input.constructor;\n    }\n    else {\n      target = input;\n    }\n    return value.accepts(target);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ObjectTypeCallProperty)) {\n      return -1;\n    }\n    return compareTypes(this.value, input.value);\n  }\n\n  unwrap (): Type<T> {\n    return this.value.unwrap();\n  }\n\n\n  toString (): string {\n    if (this.static) {\n      return `static ${this.value.toString()};`;\n    }\n    else {\n      return this.value.toString();\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport ObjectTypeProperty from './ObjectTypeProperty';\nimport ObjectTypeIndexer from './ObjectTypeIndexer';\nimport ObjectTypeCallProperty from './ObjectTypeCallProperty';\n\nexport type Property<K: string | number, V>\n = ObjectTypeProperty<K, V>\n | ObjectTypeIndexer<K, V>\n ;\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {\n  inValidationCycle,\n  startValidationCycle,\n  endValidationCycle,\n  inToStringCycle,\n  startToStringCycle,\n  endToStringCycle\n} from '../cyclic';\n\n\nexport default class ObjectType<T: {}> extends Type {\n  typeName: string = 'ObjectType';\n  properties: ObjectTypeProperty<$Keys<T>, any>[] = [];\n  indexers: ObjectTypeIndexer<any, any>[] = [];\n  callProperties: ObjectTypeCallProperty<any>[] = [];\n  exact: boolean = false;\n\n  /**\n   * Get a property with the given name, or undefined if it does not exist.\n   */\n  getProperty (key: string | number): ? Property<$Keys<T>, any> {\n    const {properties} = this;\n    const {length} = properties;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        return property;\n      }\n    }\n    return this.getIndexer(key);\n  }\n\n  /**\n   * Determine whether a property with the given name exists.\n   */\n  hasProperty (key: string): boolean {\n    const {properties} = this;\n    const {length} = properties;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        return true;\n      }\n    }\n    return this.hasIndexer(key);\n  }\n\n\n  /**\n   * Get an indexer with which matches the given key type.\n   */\n  getIndexer <K: string | number> (key: K): ? ObjectTypeIndexer<K, any> {\n    const {indexers} = this;\n    const {length} = indexers;\n    for (let i = 0; i < length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key)) {\n        return indexer;\n      }\n    }\n  }\n\n  /**\n   * Determine whether an indexer exists which matches the given key type.\n   */\n  hasIndexer (key: string | number): boolean {\n    const {indexers} = this;\n    const {length} = indexers;\n    for (let i = 0; i < length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input === null) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    const hasCallProperties = this.callProperties.length > 0;\n\n    if (hasCallProperties) {\n      if (!acceptsCallProperties(this, input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_CALLABLE'), this];\n      }\n    }\n    else if (typeof input !== 'object') {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    if (validation.inCycle(this, input)) {\n      return;\n    }\n    validation.startCycle(this, input);\n\n\n    if (this.indexers.length > 0) {\n      yield* collectErrorsWithIndexers(this, validation, path, input);\n    }\n    else if (this.exact) {\n      yield* collectErrorsExact(this, validation, path, input);\n    }\n    else {\n      yield* collectErrorsWithoutIndexers(this, validation, path, input);\n    }\n    validation.endCycle(this, input);\n  }\n\n  accepts (input: any): boolean {\n    if (input === null) {\n      return false;\n    }\n    const hasCallProperties = this.callProperties.length > 0;\n\n    if (hasCallProperties) {\n      if (!acceptsCallProperties(this, input)) {\n        return false;\n      }\n    }\n    else if (typeof input !== 'object') {\n      return false;\n    }\n    if (inValidationCycle(this, input)) {\n      return true;\n    }\n    startValidationCycle(this, input);\n\n    let result;\n    if (this.indexers.length > 0) {\n      result = acceptsWithIndexers(this, input);\n    }\n    else if (this.exact) {\n      result = acceptsExact(this, input);\n    }\n    else {\n      result = acceptsWithoutIndexers(this, input);\n    }\n    endValidationCycle(this, input);\n    return result;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ObjectType)) {\n      return -1;\n    }\n    const hasCallProperties = this.callProperties.length > 0;\n\n    let isGreater = false;\n    if (hasCallProperties) {\n      const result = compareTypeCallProperties(this, input);\n      if (result === -1) {\n        return -1;\n      }\n      else if (result === 1) {\n        isGreater = true;\n      }\n    }\n\n    let result;\n    if (this.indexers.length > 0) {\n      result = compareTypeWithIndexers(this, input);\n    }\n    else {\n      result = compareTypeWithoutIndexers(this, input);\n    }\n\n    if (result === -1) {\n      return -1;\n    }\n    else if (isGreater) {\n      return 1;\n    }\n    else {\n      return result;\n    }\n  }\n\n  toString (): string {\n    const {callProperties, properties, indexers} = this;\n    if (inToStringCycle(this)) {\n      return '$Cycle<Object>';\n    }\n    startToStringCycle(this);\n    const body = [];\n    for (let i = 0; i < callProperties.length; i++) {\n      body.push(callProperties[i].toString());\n    }\n    for (let i = 0; i < properties.length; i++) {\n      body.push(properties[i].toString());\n    }\n    for (let i = 0; i < indexers.length; i++) {\n      body.push(indexers[i].toString());\n    }\n    endToStringCycle(this);\n    if (this.exact) {\n      return `{|\\n${indent(body.join('\\n'))}\\n|}`;\n    }\n    else {\n      return `{\\n${indent(body.join('\\n'))}\\n}`;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      callProperties: this.callProperties,\n      properties: this.properties,\n      indexers: this.indexers,\n      exact: this.exact\n    };\n  }\n}\n\nfunction acceptsCallProperties (type: ObjectType<any>, input: any): boolean {\n  const {callProperties} = type;\n  for (let i = 0; i < callProperties.length; i++) {\n    const callProperty = callProperties[i];\n    if (callProperty.accepts(input)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\nfunction compareTypeCallProperties (type: ObjectType<any>, input: ObjectType<any>): -1 | 0 | 1 {\n  const {callProperties} = type;\n  const inputCallProperties = input.callProperties;\n  let identicalCount = 0;\n  loop: for (let i = 0; i < callProperties.length; i++) {\n    const callProperty = callProperties[i];\n\n    for (let j = 0; j < inputCallProperties.length; j++) {\n      const inputCallProperty = inputCallProperties[j];\n      const result = compareTypes(callProperty, inputCallProperty);\n      if (result === 0) {\n        identicalCount++;\n        continue loop;\n      }\n      else if (result === 1) {\n        continue loop;\n      }\n    }\n    // If we got this far, nothing accepted.\n    return -1;\n  }\n  if (identicalCount === callProperties.length) {\n    return 0;\n  }\n  else {\n    return 1;\n  }\n}\n\nfunction acceptsWithIndexers (type: ObjectType<any>, input: Object): boolean {\n  const {properties, indexers} = type;\n  const seen = [];\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    if (!property.accepts(input)) {\n      return false;\n    }\n    seen.push(property.key);\n  }\n  loop: for (const key in input) {\n    if (seen.indexOf(key) !== -1) {\n      continue;\n    }\n    const value = input[key];\n    for (let i = 0; i < indexers.length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {\n        continue loop;\n      }\n    }\n\n    // if we got this far the key / value did not accepts any indexers.\n    return false;\n  }\n  return true;\n}\n\nfunction compareTypeWithIndexers (type: ObjectType<any>, input: ObjectType<any>): -1 | 0 | 1 {\n  const {indexers, properties} = type;\n  const inputIndexers = input.indexers;\n  const inputProperties = input.properties;\n  let isGreater = false;\n  loop: for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    for (let j = 0; j < inputProperties.length; j++) {\n      const inputProperty = inputProperties[j];\n      if (inputProperty.key === property.key) {\n        const result = compareTypes(property, inputProperty);\n        if (result === -1) {\n          return -1;\n        }\n        else if (result === 1) {\n          isGreater = true;\n        }\n        continue loop;\n      }\n    }\n  }\n  loop: for (let i = 0; i < indexers.length; i++) {\n    const indexer = indexers[i];\n    for (let j = 0; j < inputIndexers.length; j++) {\n      const inputIndexer = inputIndexers[j];\n      const result = compareTypes(indexer, inputIndexer);\n      if (result === 1) {\n        isGreater = true;\n        continue loop;\n      }\n      else if (result === 0) {\n        continue loop;\n      }\n    }\n    // if we got this far, nothing accepted\n    return -1;\n  }\n  return isGreater ? 1 : 0;\n}\n\n\nfunction acceptsWithoutIndexers (type: ObjectType<any>, input: Object): boolean {\n  const {properties} = type;\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    if (!property.accepts(input)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\nfunction acceptsExact (type: ObjectType<any>, input: Object): boolean {\n  const {properties} = type;\n  const {length} = properties;\n  loop: for (const key in input) { // eslint-disable-line guard-for-in\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        if (!property.accepts(input)) {\n          return false;\n        }\n        continue loop;\n      }\n    }\n    // if we got this far the property does not exist in the object.\n    return false;\n  }\n  return true;\n}\n\nfunction compareTypeWithoutIndexers (type: ObjectType<any>, input: ObjectType<any>): -1 | 0 | 1 {\n  const {properties} = type;\n  const inputProperties = input.properties;\n  let isGreater = false;\n  loop: for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    for (let j = 0; j < inputProperties.length; j++) {\n      const inputProperty = inputProperties[j];\n      if (inputProperty.key === property.key) {\n        const result = compareTypes(property, inputProperty);\n        if (result === -1) {\n          return -1;\n        }\n        else if (result === 1) {\n          isGreater = true;\n        }\n        continue loop;\n      }\n    }\n    return -1;\n  }\n  return isGreater ? 1 : 0;\n}\n\n\nfunction *collectErrorsWithIndexers (type: ObjectType<any>, validation: Validation<any>, path: IdentifierPath, input: Object): Generator<ErrorTuple, void, void> {\n  const {properties, indexers} = type;\n  const seen = [];\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    yield* property.errors(validation, path, input);\n    seen.push(property.key);\n  }\n  loop: for (const key in input) {\n    if (seen.indexOf(key) !== -1) {\n      continue;\n    }\n    const value = input[key];\n    for (let i = 0; i < indexers.length; i++) {\n      const indexer = indexers[i];\n      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {\n        continue loop;\n      }\n    }\n\n    // if we got this far the key / value was not accepted by any indexers.\n    yield [path.concat(key), getErrorMessage('ERR_NO_INDEXER'), type];\n  }\n}\n\n\nfunction *collectErrorsWithoutIndexers (type: ObjectType<any>, validation: Validation<any>, path: IdentifierPath, input: Object): Generator<ErrorTuple, void, void> {\n  const {properties} = type;\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    yield* property.errors(validation, path, input);\n  }\n}\n\n\nfunction *collectErrorsExact (type: ObjectType<any>, validation: Validation<any>, path: IdentifierPath, input: Object): Generator<ErrorTuple, void, void> {\n  const {properties} = type;\n  const {length} = properties;\n  loop: for (const key in input) { // eslint-disable-line guard-for-in\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (property.key === key) {\n        yield* property.errors(validation, path, input);\n        continue loop;\n      }\n    }\n    // if we got this far the property does not exist in the object.\n    yield [path, getErrorMessage('ERR_UNKNOWN_KEY', key), type];\n  }\n}\n\nfunction indent (input: string): string {\n  const lines = input.split('\\n');\n  const {length} = lines;\n  for (let i = 0; i < length; i++) {\n    lines[i] = `  ${lines[i]}`;\n  }\n  return lines.join('\\n');\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport invariant from '../invariant';\n\nimport ObjectType from './ObjectType';\nimport type {Property} from './ObjectType';\nimport type ObjectTypeProperty from './ObjectTypeProperty';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class IntersectionType<T: {}> extends Type {\n  typeName: string = 'IntersectionType';\n  types: Type<T>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      yield* types[i].errors(validation, path, input);\n    }\n  }\n\n  /**\n   * Get a property with the given name, or undefined if it does not exist.\n   */\n  getProperty <K: string | number> (key: K): ? Property<K, any> {\n    const {types} = this;\n    const {length} = types;\n    for (let i = length - 1; i >= 0; i--) {\n      const type = types[i];\n      if (typeof type.getProperty === 'function') {\n        const prop = type.getProperty(key);\n        if (prop) {\n          return prop;\n        }\n      }\n    }\n  }\n\n  /**\n   * Determine whether a property with the given name exists.\n   */\n  hasProperty (key: string): boolean {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (typeof type.hasProperty === 'function' && type.hasProperty(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  accepts (input: any): boolean {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (!type.accepts(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const types = this.types;\n    let identicalCount = 0;\n    if (input instanceof IntersectionType) {\n      const inputTypes = input.types;\n      loop: for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        for (let j = 0; j < inputTypes.length; j++) {\n          const result = compareTypes(type, inputTypes[i]);\n          if (result === 0) {\n            identicalCount++;\n            continue loop;\n          }\n          else if (result === 1) {\n            continue loop;\n          }\n        }\n        // if we got this far then nothing accepted this type.\n        return -1;\n      }\n      return identicalCount === types.length ? 0 : 1;\n    }\n    else {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        const result = compareTypes(type, input);\n        if (result === -1) {\n          return -1;\n        }\n        else if (result === 0) {\n          identicalCount++;\n        }\n      }\n      return identicalCount === types.length ? 0 : 1;\n    }\n  }\n\n  unwrap (): ObjectType<T> {\n    const callProperties = [];\n    const properties = [];\n    const indexers = [];\n    const {types, context} = this;\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i].unwrap();\n      invariant(type instanceof ObjectType, 'Can only intersect object types');\n      callProperties.push(...type.callProperties);\n      indexers.push(...type.indexers);\n      mergeProperties(properties, type.properties);\n    }\n    return (context: any).object(\n      ...callProperties,\n      ...properties,\n      ...indexers\n    );\n  }\n\n  toString (): string {\n    return this.types.join(' & ');\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      types: this.types\n    };\n  }\n}\n\nfunction getPropertyIndex <K: string | number, V> (name: K, properties: ObjectTypeProperty<*, V>[]): number {\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction mergeProperties <K: string | number, V> (target: ObjectTypeProperty<K, V>[], source: ObjectTypeProperty<K, V>[]): ObjectTypeProperty<K, V>[] {\n  for (let i = 0; i < source.length; i++) {\n    const typeProp = source[i];\n    const index = getPropertyIndex(typeProp.key, target);\n    if (index === -1) {\n      target.push(typeProp);\n    }\n    else {\n      target[index] = typeProp;\n    }\n  }\n  return target;\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class MixedType extends Type {\n  typeName: string = 'MixedType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  toString (): string {\n    return 'mixed';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport TypeParameterApplication from './TypeParameterApplication';\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class TypeAlias<T> extends Type {\n  typeName: string = 'TypeAlias';\n  name: string;\n  type: Type<T>;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): TypeAlias<T> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  get hasConstraints (): boolean {\n    return this.constraints.length > 0;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0; // should never need this because it's taken care of by compareTypes.\n    }\n    else if (this.hasConstraints) {\n      // if we have constraints the types cannot be the same\n      return -1;\n    }\n    else {\n      return compareTypes(this.type, input);\n    }\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.unwrap();\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap();\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name);\n    }\n  }\n\n  toString (withDeclaration?: boolean): string {\n    const {name, type} = this;\n    if (withDeclaration) {\n      return `type ${name} = ${type.toString()};`;\n    }\n    else {\n      return name;\n    }\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NullLiteralType extends Type {\n  typeName: string = 'NullLiteralType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input !== null) {\n      yield [path, getErrorMessage('ERR_EXPECT_NULL'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === null;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NullLiteralType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'null';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class VoidType extends Type {\n  typeName: string = 'VoidType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input !== undefined) {\n      yield [path, getErrorMessage('ERR_EXPECT_VOID'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === undefined;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof VoidType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'void';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport NullLiteralType from './NullLiteralType';\nimport VoidType from './VoidType';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NullableType<T> extends Type<T> {\n  typeName: string = 'NullableType';\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (input != null) {\n      yield* this.type.errors(validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    if (input == null) {\n      return true;\n    }\n    else {\n      return this.type.accepts(input);\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NullLiteralType || input instanceof VoidType) {\n      return 1;\n    }\n    else if (input instanceof NullableType) {\n      return compareTypes(this.type, input.type);\n    }\n    else {\n      const result = compareTypes(this.type, input);\n      if (result === -1) {\n        return -1;\n      }\n      else {\n        return 1;\n      }\n    }\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return `? ${this.type.toString()}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NumericLiteralType<T: number> extends Type {\n  typeName: string = 'NumericLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {value} = this;\n    if (input !== value) {\n      yield [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', value), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NumericLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return `${this.value}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport NumericLiteralType from './NumericLiteralType';\n\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class NumberType extends Type {\n  typeName: string = 'NumberType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'number') {\n      yield [path, getErrorMessage('ERR_EXPECT_NUMBER'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'number';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof NumberType) {\n      return 0;\n    }\n    else if (input instanceof NumericLiteralType) {\n      return 1;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return 'number';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n","\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameter from './TypeParameter';\nimport TypeParameterApplication from './TypeParameterApplication';\n\nimport {collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class PartialType<X, T> extends Type {\n  typeName: string = 'PartialType';\n  name: string;\n  type: Type<T>;\n  typeParameters: TypeParameter<X>[] = [];\n  constraints: ? TypeConstraint[];\n\n  typeParameter (id: string, bound?: Type<X>, defaultType?: Type<X>): TypeParameter<X> {\n    const target = new TypeParameter(this.context);\n    target.id = id;\n    target.bound = bound;\n    target.default = defaultType;\n    this.typeParameters.push(target);\n    return target;\n  }\n\n  apply (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {constraints, type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors && constraints) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {constraints, type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (constraints && !constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0;\n    }\n    else {\n      return compareTypes(this.type, input);\n    }\n  }\n\n  toString (expand?: boolean): string {\n    const {type} = this;\n    return type.toString(expand);\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      typeParameters: this.typeParameters,\n      type: this.type\n    };\n  }\n}","\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeCreator} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport TypeAlias from './TypeAlias';\nimport PartialType from './PartialType';\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport {constraintsAccept} from '../typeConstraints';\n\n\nexport default class ParameterizedTypeAlias <T: Type> extends TypeAlias {\n  typeName: string = 'ParameterizedTypeAlias';\n\n  typeCreator: TypeCreator<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any, ...typeInstances: Type<any>[]): Generator<ErrorTuple, void, void> {\n    yield* getPartial(this, ...typeInstances).errors(validation, path, input);\n  }\n\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean {\n    const partial = getPartial(this, ...typeInstances);\n    if (!partial.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0; // should never need this because it's taken care of by compareTypes.\n    }\n    else if (this.hasConstraints) {\n      // if we have constraints the types cannot be the same\n      return -1;\n    }\n    else {\n      return compareTypes(getPartial(this), input);\n    }\n  }\n\n  hasProperty (name: string, ...typeInstances: Type<any>[]): boolean {\n    const inner = this.unwrap(...typeInstances);\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name, ...typeInstances);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string, ...typeInstances: Type<any>[]): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap(...typeInstances);\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name, ...typeInstances);\n    }\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (...typeInstances: Type<any>[]): Type<any> {\n    return getPartial(this, ...typeInstances).unwrap();\n  }\n\n  toString (withDeclaration?: boolean): string {\n    const partial = getPartial(this);\n    const {typeParameters} = partial;\n    const items = [];\n    for (let i = 0; i < typeParameters.length; i++) {\n      const typeParameter = typeParameters[i];\n      items.push(typeParameter.toString(true));\n    }\n\n    const {name} = this;\n    const identifier = typeParameters.length > 0\n                     ? `${name}<${items.join(', ')}>`\n                     : name\n                     ;\n\n    if (withDeclaration) {\n      return `type ${identifier} = ${partial.toString()};`;\n    }\n    else {\n      return identifier;\n    }\n  }\n\n  toJSON () {\n    const partial = getPartial(this);\n    return partial.toJSON();\n  }\n}\n\nfunction getPartial <T> (parent: ParameterizedTypeAlias<T>, ...typeInstances: Type<any>[]): PartialType<T> {\n\n  const {typeCreator, context, name} = parent;\n  const partial = new PartialType(context);\n  partial.name = name;\n  partial.type = typeCreator(partial);\n  partial.constraints = parent.constraints;\n\n  const {typeParameters} = partial;\n  const limit = Math.min(typeInstances.length, typeParameters.length);\n  for (let i = 0; i < limit; i++) {\n    const typeParameter = typeParameters[i];\n    const typeInstance = typeInstances[i];\n    if (typeParameter.bound && typeParameter.bound !== typeInstance) {\n      // if the type parameter is already bound we need to\n      // create an intersection type with this one.\n      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);\n    }\n    else {\n      typeParameter.bound = typeInstance;\n    }\n  }\n\n  return partial;\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\n\nimport PartialType from './PartialType';\nimport type FunctionTypeParam from './FunctionTypeParam';\nimport type FunctionTypeRestParam from './FunctionTypeRestParam';\nimport type FunctionTypeReturn from './FunctionTypeReturn';\nimport type TypeParameter from './TypeParameter';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport type FunctionBodyCreator <P, R> = (partial: PartialType<(...params: P[]) => R>) => Array<FunctionTypeParam<P> | FunctionTypeRestParam<P> | FunctionTypeReturn<R>>;\n\n\nexport default class ParameterizedFunctionType <X, P: any, R: any> extends Type {\n  typeName: string = 'ParameterizedFunctionType';\n  bodyCreator: FunctionBodyCreator<P, R>;\n\n  get typeParameters (): TypeParameter<X>[] {\n    return getPartial(this).typeParameters;\n  }\n\n  get params (): FunctionTypeParam<P>[] {\n    return getPartial(this).type.params;\n  }\n\n  get rest (): ? FunctionTypeRestParam<P> {\n    return getPartial(this).type.rest;\n  }\n\n  get returnType (): Type<R> {\n    return getPartial(this).type.returnType;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any, ...typeInstances: Type<any>[]): Generator<ErrorTuple, void, void> {\n    yield* getPartial(this, ...typeInstances).errors(validation, path, input);\n  }\n\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean {\n    return getPartial(this, ...typeInstances).accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(getPartial(this), input);\n  }\n\n  acceptsParams (...args: any[]): boolean {\n    return getPartial(this).type.acceptsParams(...args);\n  }\n\n  acceptsReturn (input: any): boolean {\n    return getPartial(this).type.acceptsReturn(input);\n  }\n\n  assertParams <T> (...args: T[]): T[] {\n    return getPartial(this).type.assertParams(...args);\n  }\n\n  assertReturn <T> (input: T): T {\n    return getPartial(this).type.assertReturn(input);\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (...typeInstances: Type<any>[]): Type<(...params: P[]) => R | any> {\n    return getPartial(this, ...typeInstances).unwrap();\n  }\n\n  toString (): string {\n    const partial = getPartial(this);\n    const {type, typeParameters} = partial;\n    if (typeParameters.length === 0) {\n      return type.toString();\n    }\n    const items = [];\n    for (let i = 0; i < typeParameters.length; i++) {\n      const typeParameter = typeParameters[i];\n      items.push(typeParameter.toString(true));\n    }\n    return `<${items.join(', ')}> ${type.toString()}`;\n  }\n\n  toJSON () {\n    const partial = getPartial(this);\n    return partial.toJSON();\n  }\n}\n\nfunction getPartial <X, P, R> (parent: ParameterizedFunctionType<X, P, R>, ...typeInstances: Type<any>[]): PartialType<(...params: P[]) => R> {\n\n  const {context, bodyCreator} = parent;\n  const partial = new PartialType(context);\n  const body = bodyCreator(partial);\n  partial.type = context.function(...body);\n\n  const {typeParameters} = partial;\n  const limit = Math.min(typeInstances.length, typeParameters.length);\n  for (let i = 0; i < limit; i++) {\n    const typeParameter = typeParameters[i];\n    const typeInstance = typeInstances[i];\n    if (typeParameter.bound && typeParameter.bound !== typeInstance) {\n      // if the type parameter is already bound we need to\n      // create an intersection type with this one.\n      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);\n    }\n    else {\n      typeParameter.bound = typeInstance;\n    }\n  }\n\n  return partial;\n}\n","\nimport Type from './Type';\nimport type {TypeConstraint} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport TypeParameterApplication from './TypeParameterApplication';\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class RefinementType<T> extends Type {\n  typeName: string = 'RefinementType';\n  type: Type<T>;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): RefinementType<T> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input === this) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.unwrap();\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap();\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name);\n    }\n  }\n\n  toString (): string {\n    const {type} = this;\n    return `$Refinment<${type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class StringLiteralType<T: string> extends Type {\n  typeName: string = 'StringLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {value} = this;\n    if (input !== value) {\n      yield [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof StringLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString (): string {\n    return JSON.stringify(this.value);\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport StringLiteralType from './StringLiteralType';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class StringType extends Type {\n  typeName: string = 'StringType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    if (typeof input !== 'string') {\n      yield [path, getErrorMessage('ERR_EXPECT_STRING'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'string';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof StringLiteralType) {\n      return 1;\n    }\n    else if (input instanceof StringType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return 'string';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}\n\n","/* @flow */\n\nimport Type from './Type';\nimport getErrorMessage from '../getErrorMessage';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class SymbolLiteralType<T: Symbol> extends Type {\n  typeName: string = 'SymbolLiteralType';\n  value: T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {value} = this;\n    if (input !== value) {\n      yield [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return input === this.value;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof SymbolLiteralType && input.value === this.value) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return `typeof ${String(this.value)}`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      value: this.value\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport SymbolLiteralType from './SymbolLiteralType';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class SymbolType extends Type {\n  typeName: string = 'SymbolType';\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // @flowIssue 252\n    if (typeof input !== 'symbol') {\n      yield [path, getErrorMessage('ERR_EXPECT_SYMBOL'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    return typeof input === 'symbol';\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (input instanceof SymbolLiteralType) {\n      return 1;\n    }\n    else if (input instanceof SymbolType) {\n      return 0;\n    }\n    else {\n      return -1;\n    }\n  }\n\n  toString () {\n    return 'Symbol';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName\n    };\n  }\n}","/* @flow */\n\nimport Type from './Type';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport getErrorMessage from \"../getErrorMessage\";\n\n\n/**\n * # ThisType\n * Captures a reference to a particular instance of a class or a value,\n * and uses that value to perform an identity check.\n * In the case that `this` is undefined, any value will be permitted.\n */\nexport default class ThisType<T> extends Type {\n  typeName: string = 'ThisType';\n\n  recorded: ? T;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {recorded} = this;\n    if (input === recorded) {\n      return;\n    }\n    else if (typeof recorded === 'function' && input instanceof recorded) {\n      return;\n    }\n    else if (recorded != null) {\n      yield [path, getErrorMessage('ERR_EXPECT_THIS'), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {recorded} = this;\n    if (input === recorded) {\n      return true;\n    }\n    else if (typeof recorded === 'function' && input instanceof recorded) {\n      return true;\n    }\n    else if (recorded != null) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    if (!(input instanceof ThisType)) {\n      return -1;\n    }\n    else if (input.recorded && this.recorded) {\n      return input.recorded === this.recorded ? 0 : -1;\n    }\n    else if (this.recorded) {\n      return 0;\n    }\n    else {\n      return 1;\n    }\n  }\n\n  /**\n   * Get the inner type.\n   */\n  unwrap (): Type<T> {\n    return this;\n  }\n\n  toString (withBinding?: boolean): string {\n    return 'this';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeRevealer} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameterApplication from './TypeParameterApplication';\n\nconst warnedInstances = new WeakSet();\n\nexport default class TypeBox<T: any> extends Type {\n  typeName: string = 'TypeBox';\n\n  reveal: TypeRevealer<T>;\n\n  get name (): ? string {\n    return (this.type: any).name;\n  }\n\n  get type (): Type<T> {\n    const {reveal} = this;\n    const type = reveal();\n    if (!type) {\n      if (!warnedInstances.has(this)) {\n        this.context.emitWarningMessage('Failed to reveal boxed type.');\n        warnedInstances.add(this);\n      }\n      return this.context.mixed();\n    }\n    else if (!(type instanceof Type)) {\n      // we got a boxed reference to something like a class\n      return this.context.ref(type);\n    }\n    return type;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.type, input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this.type;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return this.type.toString();\n  }\n\n  toJSON () {\n    return this.type.toJSON();\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport TypeParameterApplication from './TypeParameterApplication';\nimport compareTypes from '../compareTypes';\n\nconst warnedMissing = {};\n\nexport default class TypeReference<T: any> extends Type {\n  typeName: string = 'TypeReference';\n  name: string;\n\n  get type (): Type<T> {\n    const {context, name} = this;\n    const type = context.get(name);\n    if (!type) {\n      if (!warnedMissing[name]) {\n        context.emitWarningMessage(`Cannot resolve type: ${name}`);\n        warnedMissing[name] = true;\n      }\n      return (context.any(): any);\n    }\n    return type;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.type, input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return (this.type.unwrap(): any);\n  }\n\n  toString (): string {\n    return this.name;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      name: this.name\n    };\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport compareTypes from '../compareTypes';\nimport type {TypeRevealer} from './';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\nimport type ObjectTypeProperty from './ObjectTypeProperty';\n\nimport TypeParameterApplication from './TypeParameterApplication';\n\nconst warnedInstances = new WeakSet();\n\nconst RevealedName = Symbol('RevealedName');\nconst RevealedValue = Symbol('RevealedValue');\n\nexport default class TypeTDZ<T: any> extends Type {\n  typeName: string = 'TypeTDZ';\n\n  reveal: TypeRevealer<T>;\n\n  // @flowIssue 252\n  [RevealedName]: ? string = undefined;\n\n  // @flowIssue 252\n  [RevealedValue]: ? Type<T> = undefined;\n\n  get name (): ? string {\n    let name = (this: any)[RevealedName];\n    if (!name) {\n      name = (getRevealed(this): any).name;\n    }\n    return name;\n  }\n\n  set name (value: string) {\n    (this: any)[RevealedName] = value;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* getRevealed(this).errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return getRevealed(this).accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(getRevealed(this), input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<T> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = getRevealed(this);\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (): Type<T> {\n    return getRevealed(this).unwrap();\n  }\n\n  hasProperty (name: string): boolean {\n    const inner = this.unwrap();\n    if (inner && typeof inner.hasProperty === 'function') {\n      return inner.hasProperty(name);\n    }\n    else {\n      return false;\n    }\n  }\n\n  getProperty (name: string): ? ObjectTypeProperty<any> {\n    const inner = this.unwrap();\n    if (inner && typeof inner.getProperty === 'function') {\n      return inner.getProperty(name);\n    }\n  }\n\n  toString (): string {\n    return getRevealed(this).toString();\n  }\n\n  toJSON () {\n    return getRevealed(this).toJSON();\n  }\n}\n\nfunction getRevealed <T: any> (container: TypeTDZ<T>): Type<T> {\n  const existing = (container: $FlowIssue<252>)[RevealedValue];\n  if (existing) {\n    return existing;\n  }\n  else {\n    const {reveal} = container;\n    const type = reveal();\n    if (!type) {\n      if (!warnedInstances.has(container)) {\n        const name = (container: any)[RevealedName];\n        if (name) {\n          container.context.emitWarningMessage(`Failed to reveal type called \"${name}\" in Temporal Dead Zone.`);\n        }\n        else {\n          container.context.emitWarningMessage('Failed to reveal unknown type in Temporal Dead Zone.');\n        }\n        warnedInstances.add(container);\n      }\n      return container.context.mixed();\n    }\n    else if (!(type instanceof Type)) {\n      // we got a boxed reference to something like a class\n      return container.context.ref(type);\n    }\n    return type;\n  }\n}\n","/* @flow */\n\nimport Type from './Type';\nimport getErrorMessage from \"../getErrorMessage\";\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport compareTypes from '../compareTypes';\n\nexport default class UnionType<T> extends Type {\n  typeName: string = 'UnionType';\n  types: Type<T>[] = [];\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (type.accepts(input)) {\n        return;\n      }\n    }\n    yield [path, getErrorMessage('ERR_NO_UNION', this.toString()), this];\n  }\n\n  accepts (input: any): boolean {\n    const {types} = this;\n    const {length} = types;\n    for (let i = 0; i < length; i++) {\n      const type = types[i];\n      if (type.accepts(input)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const types = this.types;\n    if (input instanceof UnionType) {\n      const inputTypes = input.types;\n      let identicalCount = 0;\n      loop: for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        for (let j = 0; j < inputTypes.length; j++) {\n          const result = compareTypes(type, inputTypes[i]);\n          if (result === 0) {\n            identicalCount++;\n            continue loop;\n          }\n          else if (result === 1) {\n            continue loop;\n          }\n        }\n        // if we got this far then nothing accepted this type.\n        return -1;\n      }\n\n      if (identicalCount === types.length) {\n        return 0;\n      }\n      else {\n        return 1;\n      }\n    }\n    else {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (compareTypes(type, input) >= 0) {\n          return 1;\n        }\n      }\n      return -1;\n    }\n  }\n\n  toString (): string {\n    const {types} = this;\n    const normalized = new Array(types.length);\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      if (type.typeName === 'FunctionType' || type.typeName === 'ParameterizedFunctionType') {\n        normalized[i] = `(${type.toString()})`;\n      }\n      else {\n        normalized[i] = type.toString();\n      }\n    }\n    return normalized.join(' | ');\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      types: this.types\n    };\n  }\n}","/* @flow */\n\nimport primitiveTypes from './primitiveTypes';\n\nimport type TypeContext from './TypeContext';\n\nimport {\n  NullLiteralType,\n  NumberType,\n  BooleanType,\n  SymbolType,\n  StringType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  VoidType\n} from './types';\n\n\nexport default function registerPrimitiveTypes (t: TypeContext): TypeContext {\n  primitiveTypes.null = Object.freeze(new NullLiteralType(t));\n  primitiveTypes.empty = Object.freeze(new EmptyType(t));\n  primitiveTypes.number = Object.freeze(new NumberType(t));\n  primitiveTypes.boolean = Object.freeze(new BooleanType(t));\n  primitiveTypes.string = Object.freeze(new StringType(t));\n  primitiveTypes.symbol = Object.freeze(new SymbolType(t));\n  primitiveTypes.any = Object.freeze(new AnyType(t));\n  primitiveTypes.mixed = Object.freeze(new MixedType(t));\n  primitiveTypes.void = Object.freeze(new VoidType(t));\n  primitiveTypes.existential = Object.freeze(new ExistentialType(t));\n  return t;\n}","/* @flow */\nimport getErrorMessage from './getErrorMessage';\n\nimport invariant from './invariant';\n\nimport {Type} from './types';\n\nimport type TypeContext from './TypeContext';\nimport type Validation, {ErrorTuple, IdentifierPath} from './Validation';\n\nexport default function registerBuiltinTypeConstructors (t: TypeContext): TypeContext {\n\n  t.declareTypeConstructor({\n    name: 'Date',\n    impl: Date,\n    typeName: 'DateType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n      if (!(input instanceof Date)) {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Date'), this];\n      }\n      else if (isNaN(input.getTime())) {\n        yield [path, getErrorMessage('ERR_INVALID_DATE'), this];\n      }\n    },\n    accepts (input): boolean {\n      return input instanceof Date && !isNaN(input.getTime());\n    },\n    inferTypeParameters (input: Date): Type<any>[] {\n      return [];\n    }\n  });\n\n  t.declareTypeConstructor({\n    name: 'Promise',\n    impl: Promise,\n    typeName: 'PromiseType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any, futureType?: Type<any>): Generator<ErrorTuple, void, void> {\n      invariant(futureType, 'Must specify type parameter for Promise.');\n      const {context} = this;\n      if (!context.checkPredicate('Promise', input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_PROMISE', futureType), this];\n      }\n    },\n    accepts (input): boolean {\n      const {context} = this;\n      return context.checkPredicate('Promise', input);\n    },\n    inferTypeParameters (input: any): Type<any>[] {\n      return [];\n    }\n  });\n\n  t.declareTypeConstructor({\n    name: 'Map',\n    impl: Map,\n    typeName: 'MapType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any, keyType?: Type<any>, valueType?: Type<any>): Generator<ErrorTuple, void, void> {\n      invariant(keyType, 'Must specify two type parameters for Map.');\n      invariant(valueType, 'Must specify two type parameters for Map.');\n      const {context} = this;\n      if (!context.checkPredicate('Map', input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Map'), this];\n        return;\n      }\n      for (const [key, value] of input) {\n        if (!keyType.accepts(key)) {\n          yield [path, getErrorMessage('ERR_EXPECT_KEY_TYPE', keyType), this];\n        }\n\n        yield* valueType.errors(validation, path.concat(key), value);\n      }\n    },\n    accepts (input, keyType: Type<any>, valueType: Type<any>): boolean {\n      const {context} = this;\n      if (!context.checkPredicate('Map', input)) {\n        return false;\n      }\n      for (const [key, value] of input) {\n        if (!keyType.accepts(key) || !valueType.accepts(value)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    inferTypeParameters (input: Map<*, *>): Type<any>[] {\n      const keyTypes = [];\n      const valueTypes = [];\n      loop: for (const [key, value] of input) {\n        findKey: {\n          for (let i = 0; i < keyTypes.length; i++) {\n            const type = keyTypes[i];\n            if (type.accepts(key)) {\n              break findKey;\n            }\n          }\n          keyTypes.push(t.typeOf(key));\n        }\n\n        for (let i = 0; i < valueTypes.length; i++) {\n          const type = valueTypes[i];\n          if (type.accepts(value)) {\n            continue loop;\n          }\n        }\n        valueTypes.push(t.typeOf(value));\n      }\n      const typeInstances = [];\n\n      if (keyTypes.length === 0) {\n        typeInstances.push(t.existential());\n      }\n      else if (keyTypes.length === 1) {\n        typeInstances.push(keyTypes[0]);\n      }\n      else {\n        typeInstances.push(t.union(...keyTypes));\n      }\n\n      if (valueTypes.length === 0) {\n        typeInstances.push(t.existential());\n      }\n      else if (valueTypes.length === 1) {\n        typeInstances.push(valueTypes[0]);\n      }\n      else {\n        typeInstances.push(t.union(...valueTypes));\n      }\n\n      return typeInstances;\n    }\n  });\n\n  t.declareTypeConstructor({\n    name: 'Set',\n    impl: Set,\n    typeName: 'SetType',\n    *errors (validation: Validation<any>, path: IdentifierPath, input: any, valueType?: Type<any>): Generator<ErrorTuple, void, void> {\n      invariant(valueType, 'Must specify type parameter for Set.');\n      const {context} = this;\n      if (!context.checkPredicate('Set', input)) {\n        yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Set'), this];\n        return;\n      }\n      for (const value of input) {\n        yield* valueType.errors(validation, path, value);\n      }\n    },\n    accepts (input, valueType) {\n      const {context} = this;\n      if (!context.checkPredicate('Set', input)) {\n        return false;\n      }\n      for (const value of input) {\n        if (!valueType.accepts(value)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    inferTypeParameters (input: Set<*>): Type<any>[] {\n      const valueTypes = [];\n      loop: for (const value of input) {\n        for (let i = 0; i < valueTypes.length; i++) {\n          const type = valueTypes[i];\n          if (type.accepts(value)) {\n            continue loop;\n          }\n        }\n        valueTypes.push(t.typeOf(value));\n      }\n      if (valueTypes.length === 0) {\n        return [t.existential()];\n      }\n      else if (valueTypes.length === 1) {\n        return [valueTypes[0]];\n      }\n      else {\n        return [t.union(...valueTypes)];\n      }\n    }\n  });\n\n  return t;\n}","/* @flow */\n\nimport type TypeContext from './TypeContext';\n\nexport default function registerTypePredicates (context: TypeContext) {\n  context.setPredicate('Array', (input: any) => Array.isArray(input));\n  context.setPredicate('Map', (input: any) => input instanceof Map);\n  context.setPredicate('Set', (input: any) => input instanceof Set);\n  context.setPredicate('Promise', (input: any) => {\n    if (input instanceof Promise) {\n      return true;\n    }\n    else if (input !== null && typeof input === 'object' && typeof input.then === 'function') {\n      return input.then.length >= 2;\n    }\n    else {\n      return false;\n    }\n  });\n}","/* @flow */\n\nimport type TypeContext from './TypeContext';\n\nimport type {\n  Type,\n  ArrayType,\n  ObjectType\n} from './types';\n\ntype Inferred = Map<Object, Type<any>>;\n\nexport class TypeInferer {\n  context: TypeContext;\n\n  constructor (context: TypeContext) {\n    this.context = context;\n  }\n\n  infer <T> (input: T): Type<T> {\n    const primitive = this.inferPrimitive(input);\n    if (primitive) {\n      return primitive;\n    }\n    const inferred = new Map();\n    return this.inferComplex(input, inferred);\n  }\n\n  inferInternal <T> (input: T, inferred: Inferred): Type<T> {\n    const primitive = this.inferPrimitive(input);\n    if (primitive) {\n      return primitive;\n    }\n    return this.inferComplex(input, inferred);\n  }\n\n  inferPrimitive <T> (input: T): ? Type<T> {\n    const {context} = this;\n    if (input === null) {\n      return (context.null(): any);\n    }\n    else if (input === undefined) {\n      return (context.void(): any);\n    }\n    else if (typeof input === 'number') {\n      return (context.number(): any);\n    }\n    else if (typeof input === 'boolean') {\n      return (context.boolean(): any);\n    }\n    else if (typeof input === 'string') {\n      return (context.string(): any);\n    }\n    // @flowIssue 252\n    else if (typeof input === 'symbol') {\n      return context.symbol((input: any));\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  inferComplex <T> (input: T, inferred: Inferred): Type<T> {\n    const {context} = this;\n\n    if (typeof input === 'function') {\n      return (this.inferFunction(input, inferred): any);\n    }\n    else if (input !== null && typeof input === 'object') {\n      return (this.inferObject(input, inferred): any);\n    }\n    else {\n      return (context.any(): any);\n    }\n  }\n\n  inferFunction <T: Function> (input: T, inferred: Inferred): Type<T> {\n    const {context} = this;\n    const {length} = input;\n    const body = new Array(length + 1);\n    for (let i = 0; i < length; i++) {\n      body[i] = context.param(\n        String.fromCharCode(97 + i),\n        context.existential()\n      );\n    }\n    body[length] = context.return(context.existential());\n    return (context.fn(...body): any);\n  }\n\n  inferObject <T: Object> (input: T, inferred: Inferred): Type<T> {\n    const existing = inferred.get(input);\n    if (existing) {\n      return existing;\n    }\n    const {context} = this;\n    let type;\n\n    // Temporarily create a box for this type to catch cyclical references.\n    // Nested references to this object will receive the boxed type.\n    const box = context.box(() => type);\n    inferred.set(input, box);\n\n    if (context.checkPredicate('Array', input)) {\n      type = this.inferArray((input: any), inferred);\n    }\n    else if (!(input instanceof Object)) {\n      type = this.inferDict(input, inferred);\n    }\n    else if (input.constructor !== Object) {\n      const handler = context.getTypeConstructor(input.constructor);\n      if (handler) {\n        const typeParameters = handler.inferTypeParameters(input);\n        type = handler.apply(...typeParameters);\n      }\n      else {\n        type = context.ref(input.constructor);\n      }\n    }\n    else {\n      const body = [];\n      for (const key in input) { // eslint-disable-line\n        const value = input[key];\n        body.push(context.property(key, this.inferInternal(value, inferred)));\n      }\n      type = context.object(...body);\n    }\n\n    // Overwrite the box with the real value.\n    inferred.set(input, type);\n    return (type: any);\n  }\n\n  inferDict <T: Object> (input: T, inferred: Inferred): ObjectType<T> {\n    const numericIndexers = [];\n    const stringIndexers = [];\n    loop: for (const key in input) { // eslint-disable-line\n      const value = input[key];\n      const types = isNaN(+key) ? stringIndexers : numericIndexers;\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (type.accepts(value)) {\n          continue loop;\n        }\n      }\n      types.push(this.inferInternal(value, inferred));\n    }\n\n    const {context} = this;\n    const body = [];\n    if (numericIndexers.length === 1) {\n      body.push(\n        context.indexer(\n          'index',\n          context.number(),\n          numericIndexers[0]\n        )\n      );\n    }\n    else if (numericIndexers.length > 1) {\n      body.push(\n        context.indexer(\n          'index',\n          context.number(),\n          context.union(...numericIndexers)\n        )\n      );\n    }\n\n    if (stringIndexers.length === 1) {\n      body.push(\n        context.indexer(\n          'key',\n          context.string(),\n          stringIndexers[0]\n        )\n      );\n    }\n    else if (stringIndexers.length > 1) {\n      body.push(\n        context.indexer(\n          'key',\n          context.string(),\n          context.union(...stringIndexers)\n        )\n      );\n    }\n\n    return context.object(...body);\n  }\n\n  inferArray <T> (input: T[], inferred: Inferred): ArrayType<T> {\n    const {context} = this;\n    const types = [];\n    const values = [];\n    const {length} = input;\n    loop: for (let i = 0; i < length; i++) {\n      const item = input[i];\n      const inferredType = this.inferInternal(item, inferred);\n      for (let j = 0; j < types.length; j++) {\n        const type = types[j];\n        if (type.accepts(item) && inferredType.accepts(values[j])) {\n          continue loop;\n        }\n      }\n      types.push(inferredType);\n      values.push(item);\n    }\n    if (types.length === 0) {\n      return (context.array(context.any()): any);\n    }\n    else if (types.length === 1) {\n      return context.array(types[0]);\n    }\n    else {\n      return context.array(context.union(...types));\n    }\n  }\n\n}\n\nexport default TypeInferer;","/* @flow */\n\nimport makeError from './makeError';\n\nimport type ObjectType from './types/ObjectType';\n\nexport type PropType<T: {}> = (props: T, propName: string, componentName: string) => ? Error;\n\nexport type PropTypeDict<T: {}> = $ObjMap<T, <V>(v: V) => PropType<V>>;\n\nexport default function makeReactPropTypes <T: {}> (objectType: ObjectType<T>): PropTypeDict<T> {\n  const output = {};\n  for (const property of objectType.properties) {\n    output[property.key] = (props, propName, componentName) => {\n      return makeError(property, props);\n    };\n  }\n  return output;\n}","/* @flow */\nimport {stringifyPath, resolvePath} from '../Validation';\n\nimport type Validation from '../Validation';\n\nconst delimiter = '\\n-------------------------------------------------\\n\\n';\n\nexport default function makeWarningMessage <T> (validation: Validation<T>): ? string {\n  if (!validation.hasErrors()) {\n    return;\n  }\n  const {input, context} = validation;\n  const collected = [];\n  for (const [path, message, expectedType] of validation.errors) {\n    const expected = expectedType ? expectedType.toString() : \"*\";\n    const actual = context.typeOf(resolvePath(input, path)).toString();\n\n    const field = stringifyPath(validation.path.concat(path));\n\n\n    collected.push(\n      `${field} ${message}\\n\\nExpected: ${expected}\\n\\nActual: ${actual}\\n`\n    );\n  }\n  return `Warning: ${collected.join(delimiter)}`;\n}\n","/* @flow */\n\nimport UnionType from './types/UnionType';\nimport compareTypes from './compareTypes';\n\nimport type TypeContext from './TypeContext';\nimport type Type from './types/Type';\n\n\nexport default function makeUnion <T> (context: TypeContext, types: Type<T>[]): UnionType<T> {\n  const length = types.length;\n  const merged = [];\n  for (let i = 0; i < length; i++) {\n    const type = types[i];\n    if (type instanceof UnionType) {\n      mergeUnionTypes(merged, type.types);\n    }\n    else {\n      merged.push(type);\n    }\n  }\n  const union = new UnionType(context);\n  union.types = merged;\n  return union;\n}\n\nfunction mergeUnionTypes (aTypes: Type<any>[], bTypes: Type<any>[]): void {\n  loop: for (let i = 0; i < bTypes.length; i++) {\n    const bType = bTypes[i];\n    for (let j = 0; j < aTypes.length; j++) {\n      const aType = aTypes[j];\n      if (compareTypes(aType, bType) !== -1) {\n        continue loop;\n      }\n    }\n    aTypes.push(bType);\n  }\n}","/* @flow */\n\nimport type Type from './types/Type';\n\ntype ValueDescriptor<T> = {\n  writable: boolean;\n  initializer?: () => T;\n  enumerable: boolean;\n  configurable: boolean;\n};\n\ntype AccessorDescriptor<T> = {\n  get: () => ? T;\n  set: (value: T) => void;\n  enumerable: boolean;\n  configurable: boolean;\n};\n\nexport type Descriptor<T>\n = AccessorDescriptor<T>\n | ValueDescriptor<T>\n ;\n\ntype TypeSource<T>\n = (() => Type<T>)\n | Type<T>\n ;\n\nexport function makePropertyDescriptor <O: {} | Function, T> (typeSource: TypeSource<T>, input: O, propertyName: string, descriptor: Descriptor<T>, shouldAssert: boolean): ? Descriptor<T> {\n  if (typeof descriptor.get === 'function' && typeof descriptor.set === 'function') {\n    return augmentExistingAccessors(typeSource, input, propertyName, (descriptor: $FlowIssue<AccessorDescriptor<T>>), shouldAssert);\n  }\n  else {\n    return propertyToAccessor(typeSource, input, propertyName, (descriptor: $FlowIssue<ValueDescriptor<T>>), shouldAssert);\n  }\n}\n\nfunction makePropertyName (name: string): string {\n  return `_flowRuntime$${name}`;\n}\n\nfunction getClassName (input: Function | Object): string {\n  if (typeof input === 'function') {\n    return input.name || '[Class anonymous]';\n  }\n  else if (typeof input.constructor === 'function') {\n    return getClassName(input.constructor);\n  }\n  else {\n    return '[Class anonymous]';\n  }\n}\n\nfunction resolveType <T> (receiver: any, typeSource: TypeSource<T>): Type<T> {\n  if (typeof typeSource === 'function') {\n    return typeSource.call(receiver);\n  }\n  else {\n    return typeSource;\n  }\n}\n\nfunction propertyToAccessor <O: {}, T> (typeSource: TypeSource<T>, input: O, propertyName: string, descriptor: ValueDescriptor<T>, shouldAssert: boolean): AccessorDescriptor<T> {\n  const safeName = makePropertyName(propertyName);\n  const className = getClassName(input);\n  const {initializer, writable, ...config} = descriptor; // eslint-disable-line no-unused-vars\n\n  const propertyPath = [className, propertyName];\n\n  return {\n    ...config,\n    type: 'accessor',\n    get (): ? T {\n      if (safeName in this) {\n        return (this: any)[safeName];\n      }\n      else if (initializer) {\n        const type = resolveType(this, typeSource);\n        const value = initializer.call(this);\n        const context = type.context;\n        context.check(type, value, 'Default value for property', propertyPath);\n        Object.defineProperty(this, safeName, {\n          writable: true,\n          value: value\n        });\n        return value;\n      }\n      else {\n        Object.defineProperty(this, safeName, {\n          writable: true,\n          value: undefined\n        });\n      }\n    },\n    set (value: T): void {\n      const type = resolveType(this, typeSource);\n      const context = type.context;\n      if (shouldAssert) {\n        context.assert(type, value, 'Property', propertyPath);\n      }\n      else {\n        context.warn(type, value, 'Property', propertyPath);\n      }\n      if (safeName in this) {\n        this[safeName] = value;\n      }\n      else {\n        Object.defineProperty(this, safeName, {\n          writable: true,\n          value: value\n        });\n      }\n    }\n  };\n}\n\nfunction augmentExistingAccessors <O: {}, T> (typeSource: TypeSource<T>, input: O, propertyName: string, descriptor: AccessorDescriptor<T>, shouldAssert: boolean) {\n\n  const className = getClassName(input);\n  const propertyPath = [className, propertyName];\n\n  const originalSetter = descriptor.set;\n\n  descriptor.set = function set (value: T): void {\n    const type = resolveType(this, typeSource);\n    const context = type.context;\n    if (shouldAssert) {\n      context.assert(type, value, 'Property', propertyPath);\n    }\n    else {\n      context.warn(type, value, 'Property', propertyPath);\n    }\n    originalSetter.call(this, value);\n  };\n\n}\n\n","/* @flow */\n\nimport Type from './types/Type';\n\nimport {TypeSymbol} from './symbols';\n\nexport type Decorator<T> = (input: T) => T;\n\ndeclare function annotateValue <T> (type: Type<T>): Decorator<T>;\ndeclare function annotateValue <T> (input: T, type: Type<T>): T; // eslint-disable-line no-redeclare\n\nexport default function annotateValue (input, type?) { // eslint-disable-line no-redeclare\n  if (type instanceof Type) {\n    input[TypeSymbol] = type;\n    return input;\n  }\n  else {\n    const type = input;\n    return (input) => {\n      input[TypeSymbol] = type;\n      return input;\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\n\nexport default class Declaration extends Type {\n  name: string;\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport compareTypes from '../compareTypes';\n\nimport type {Type, TypeConstraint} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport {addConstraints, collectConstraintErrors, constraintsAccept} from '../typeConstraints';\n\nexport default class VarDeclaration<T> extends Declaration {\n  typeName: string = 'VarDeclaration';\n\n  name: string;\n  type: Type<T>;\n  constraints: TypeConstraint[] = [];\n\n  addConstraint (...constraints: TypeConstraint[]): VarDeclaration<T> {\n    addConstraints(this, ...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {type} = this;\n    let hasErrors = false;\n    for (const error of type.errors(validation, path, input)) {\n      hasErrors = true;\n      yield error;\n    }\n    if (!hasErrors) {\n      yield* collectConstraintErrors(this, validation, path, input);\n    }\n  }\n\n\n  accepts (input: any): boolean {\n    const {type} = this;\n    if (!type.accepts(input)) {\n      return false;\n    }\n    else if (!constraintsAccept(this, input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.type, input);\n  }\n\n  unwrap () {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return `declare var ${this.name}: ${this.type.toString()};`;\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport compareTypes from '../compareTypes';\n\nimport type {\n  Type,\n  TypeAlias,\n  ParameterizedTypeAlias,\n  TypeConstraint,\n  TypeParameterApplication,\n  ObjectTypeProperty\n} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class TypeDeclaration<T> extends Declaration {\n  typeName: string = 'TypeDeclaration';\n\n  get type (): Type<T> {\n    return this.typeAlias.type;\n  }\n\n  typeAlias: TypeAlias<T> | ParameterizedTypeAlias<T>;\n\n  addConstraint (...constraints: TypeConstraint[]): TypeDeclaration<T> {\n    this.typeAlias.addConstraint(...constraints);\n    return this;\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.typeAlias.errors(validation, path, input);\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, T> {\n    return this.typeAlias.apply(...typeInstances);\n  }\n\n  accepts (input: any): boolean {\n    return this.typeAlias.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.typeAlias, input);\n  }\n\n  hasProperty (name: string, ...typeInstances: Type<any>[]): boolean {\n    return this.typeAlias.hasProperty(name, ...typeInstances);\n  }\n\n  getProperty (name: string, ...typeInstances: Type<any>[]): ? ObjectTypeProperty<any> {\n    return this.typeAlias.getProperty(name, ...typeInstances);\n  }\n\n  /**\n   * Get the inner type or value.\n   */\n  unwrap (...typeInstances: Type<any>[]): Type<any> {\n    return this.typeAlias.unwrap(...typeInstances);\n  }\n\n  toString (): string {\n    return `declare ${this.typeAlias.toString(true)};`;\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\n\nimport type {Type} from '../types';\nimport type ModuleExportsDeclaration from './ModuleExportsDeclaration';\n\nimport type TypeContext from '../TypeContext';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport type DeclarationDict = {\n  [name: string]: Type<any>;\n};\n\nexport type ModuleDeclarationDict = {\n  [name: string]: ModuleDeclaration;\n};\n\nimport {NameRegistrySymbol, ModuleRegistrySymbol} from '../symbols';\n\nexport default class ModuleDeclaration extends Declaration {\n  typeName: string = 'ModuleDeclaration';\n\n\n  name: string;\n  innerContext: TypeContext;\n  moduleExports: ? ModuleExportsDeclaration<any>;\n\n  get moduleType (): 'commonjs' | 'es6' {\n    if (this.moduleExports) {\n      return 'commonjs';\n    }\n    else {\n      return 'es6';\n    }\n  }\n\n  get isCommonJS (): boolean {\n    return this.moduleExports ? true : false;\n  }\n\n  get isES6 (): boolean {\n    return this.moduleExports ? false : true;\n  }\n\n  get declarations (): DeclarationDict {\n    const {innerContext} = this;\n    return (innerContext: $FlowIssue<252>)[NameRegistrySymbol];\n  }\n\n  get modules (): ModuleDeclarationDict {\n    const {innerContext} = this;\n    return (innerContext: $FlowIssue<252>)[ModuleRegistrySymbol];\n  }\n\n  get (name: string): ? Type<any> {\n    const {moduleExports} = this;\n    if (moduleExports) {\n      const exporting = moduleExports.unwrap();\n      if (typeof exporting.getProperty === 'function') {\n        const prop = exporting.getProperty(name);\n        if (prop) {\n          return prop.unwrap();\n        }\n      }\n    }\n    else {\n      const declaration = this.declarations[name];\n      if (declaration) {\n        return declaration.unwrap();\n      }\n    }\n  }\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    // Can't validate a module directly.\n    // @todo should this throw?\n  }\n\n  import (moduleName: string): ? ModuleDeclaration {\n    if (/^\\.\\//.test(moduleName)) {\n      moduleName = `${this.name}${moduleName.slice(1)}`;\n    }\n    return this.innerContext.import(moduleName);\n  }\n\n  toString (): string {\n\n    const {name, declarations, modules, moduleExports} = this;\n    const body = [];\n    for (const name in declarations) { // eslint-disable-line guard-for-in\n      const declaration = declarations[name];\n      body.push(declaration.toString(true));\n    }\n    if (modules) {\n      for (const name in modules) { // eslint-disable-line guard-for-in\n        const module = modules[name];\n        body.push(module.toString());\n      }\n    }\n    if (moduleExports) {\n      body.push(moduleExports.toString());\n    }\n    return `declare module \"${name}\" {\\n${indent(body.join('\\n\\n'))}}`;\n  }\n}\n\n\nfunction indent (input: string): string {\n  const lines = input.split('\\n');\n  const {length} = lines;\n  for (let i = 0; i < length; i++) {\n    lines[i] = `  ${lines[i]}`;\n  }\n  return lines.join('\\n');\n}","/* @flow */\n\nimport Declaration from './Declaration';\n\nimport type {Type} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ModuleExports<T> extends Declaration {\n  typeName: string = 'ModuleExports';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  unwrap () {\n    return this.type.unwrap();\n  }\n\n  toString (): string {\n    return `declare module.exports: ${this.type.toString()};`;\n  }\n}","/* @flow */\n\nimport Declaration from './Declaration';\nimport TypeParameterApplication from '../types/TypeParameterApplication';\nimport getErrorMessage from \"../getErrorMessage\";\nimport compareTypes from '../compareTypes';\n\nimport type {Type, ObjectType} from '../types';\n\nimport type {Property} from '../types/ObjectType';\n\nimport type Validation, {IdentifierPath, ErrorTuple} from '../Validation';\n\nexport default class ClassDeclaration<O: {}> extends Declaration {\n  typeName: string = 'ClassDeclaration';\n\n  name: string;\n  superClass: ? Type<any>;\n  body: ObjectType<O>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {body} = this;\n    const superClass = this.superClass && this.superClass.unwrap();\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', this.name), this];\n      return;\n    }\n    if (superClass) {\n      for (const [errorPath, errorMessage, expectedType] of superClass.errors(validation, path, input)) {\n        const propertyName = errorPath[path.length];\n        if (body.getProperty(propertyName)) {\n          continue;\n        }\n        else {\n          yield [errorPath, errorMessage, expectedType];\n        }\n      }\n    }\n    yield* body.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    const {body} = this;\n    const superClass = this.superClass && this.superClass.unwrap();\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n    else if (superClass && !superClass.accepts(input)) {\n      return false;\n    }\n    else if (!body.accepts(input)) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.body, input);\n  }\n\n  /**\n   * Get a property with the given name, or undefined if it does not exist.\n   */\n  getProperty (key: string | number): ? Property<$Keys<O>, any> {\n    const {body, superClass} = this;\n    const prop = body.getProperty(key);\n    if (prop) {\n      return prop;\n    }\n    else if (superClass && typeof superClass.getProperty === 'function') {\n      return superClass.getProperty(key);\n    }\n  }\n\n  /**\n   * Determine whether a property with the given name exists.\n   */\n  hasProperty (key: string): boolean {\n    const {body, superClass} = this;\n    if (body.hasProperty(key)) {\n      return true;\n    }\n    else if (superClass && typeof superClass.hasProperty === 'function') {\n      return superClass.hasProperty(key);\n    }\n    else {\n      return false;\n    }\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, O> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  toString (withDeclaration?: boolean) {\n    const {name, superClass, body} = this;\n    if (withDeclaration) {\n      const superClassName = superClass && ((typeof superClass.name === 'string' && superClass.name) || superClass.toString());\n      return `declare class ${name}${superClassName ? ` extends ${superClassName}` : ''} ${body.toString()}`;\n    }\n    else {\n      return name;\n    }\n  }\n}\n","/* @flow */\n\nimport Declaration from './Declaration';\nimport PartialType from '../types/PartialType';\nimport TypeParameterApplication from '../types/TypeParameterApplication';\nimport type {Type} from '../types';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nimport type {ClassBodyCreator} from './';\n\nexport default class ParameterizedClassDeclaration<X, O: {}> extends Declaration {\n  typeName: string = 'ParameterizedClassDeclaration';\n  bodyCreator: ClassBodyCreator<X, O>;\n  name: string;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any, ...typeInstances: Type<any>[]): Generator<ErrorTuple, void, void> {\n    yield* getPartial(this, ...typeInstances).errors(validation, path, input);\n  }\n\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean {\n    return getPartial(this, ...typeInstances).accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return getPartial(this).compareWith(input);\n  }\n\n  unwrap (...typeInstances: Type<any>[]): Type<O> {\n    return getPartial(this, ...typeInstances).unwrap();\n  }\n\n  apply <X> (...typeInstances: Type<X>[]): TypeParameterApplication<X, O> {\n    const target = new TypeParameterApplication(this.context);\n    target.parent = this;\n    target.typeInstances = typeInstances;\n    return target;\n  }\n\n  toString (withDeclaration?: boolean) {\n    return getPartial(this).toString(withDeclaration);\n  }\n\n  toJSON () {\n    return getPartial(this).toJSON();\n  }\n}\n\nfunction getPartial <X, O: {}> (parent: ParameterizedClassDeclaration<X, O>, ...typeInstances: Type<any>[]): PartialType<O> {\n\n  const {context, bodyCreator} = parent;\n  const partial = new PartialType(context);\n  const body = bodyCreator(partial);\n  if (Array.isArray(body)) {\n    partial.type = context.class(parent.name, ...body);\n  }\n  else {\n    partial.type = context.class(parent.name, body);\n  }\n\n  const {typeParameters} = partial;\n  const limit = Math.min(typeInstances.length, typeParameters.length);\n  for (let i = 0; i < limit; i++) {\n    const typeParameter = typeParameters[i];\n    const typeInstance = typeInstances[i];\n    if (typeParameter.bound && typeParameter.bound !== typeInstance) {\n      // if the type parameter is already bound we need to\n      // create an intersection type with this one.\n      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);\n    }\n    else {\n      typeParameter.bound = typeInstance;\n    }\n  }\n\n  return partial;\n}\n\n","/* @flow */\n\nimport Declaration from './Declaration';\n\nimport type {Type} from '../types';\n\nimport type Validation, {IdentifierPath, ErrorTuple} from '../Validation';\n\nexport default class ExtendsDeclaration<T> extends Declaration {\n  typeName: string = 'ExtendsDeclaration';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  unwrap () {\n    return this.type.unwrap();\n  }\n\n  toString (withDeclaration?: boolean) {\n    const {type} = this;\n    if (withDeclaration) {\n      return `extends ${type.toString()}`;\n    }\n    else {\n      return type.toString();\n    }\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// If A and B are object types, $Diff<A,B> is the type of objects that have\n// properties defined in A, but not in B.\n// Properties that are defined in both A and B are allowed too.\n\nexport default class $DiffType<A: {}, B: {}> extends Type<$Diff<A, B>> {\n  typeName: string = '$DiffType';\n\n  aType: Type<A>;\n  bType: Type<B>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {aType, bType} = this;\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n    aType = aType.unwrap();\n    bType = bType.unwrap();\n    invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');\n    const properties = aType.properties;\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (bType.hasProperty(property.key)) {\n        continue;\n      }\n      yield* property.errors(validation, path.concat(property.key), input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {aType, bType} = this;\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n    aType = aType.unwrap();\n    bType = bType.unwrap();\n    invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');\n    const properties = aType.properties;\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (bType.hasProperty(property.key)) {\n        continue;\n      }\n      if (!property.accepts(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Diff<A, B>> {\n    let {aType, bType} = this;\n    aType = aType.unwrap();\n    bType = bType.unwrap();\n    invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');\n    const properties = aType.properties;\n    const args = [];\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      if (bType.hasProperty(property.key)) {\n        continue;\n      }\n      args.push(property);\n    }\n    return this.context.object(...args);\n  }\n\n  toString (): string {\n    return `$Diff<${this.aType.toString()}, ${this.bType.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      aType: this.aType,\n      bType: this.bType\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// Any subtype of T\n\nexport default class $FlowFixMeType extends Type<any> {\n  typeName: string = '$FlowFixMeType';\n\n  *errors (validation: Validation<any>, input: any, path: IdentifierPath = []): Generator<ErrorTuple, void, void> {\n\n  }\n\n  accepts (input: any): boolean {\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return 1;\n  }\n\n  unwrap (): Type<any> {\n    return this;\n  }\n\n  toString (): string {\n    return '$FlowFixMe';\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// The set of keys of T.\n\nexport default class $KeysType<T: {}> extends Type<$Keys<T>> {\n  typeName: string = '$KeysType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const type = this.type.unwrap();\n    invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');\n\n    const properties = type.properties;\n    const length = properties.length;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (input === property.key) {\n        return;\n      }\n    }\n    const keys = new Array(length);\n    for (let i = 0; i < length; i++) {\n      keys[i] = properties[i].key;\n    }\n    yield [path, getErrorMessage('ERR_NO_UNION', keys.join(' | ')), this];\n  }\n\n  accepts (input: any): boolean {\n    const type = this.type.unwrap();\n    invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');\n\n    const properties = type.properties;\n    const length = properties.length;\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      if (input === property.key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Keys<T>> {\n    const context = this.context;\n    const type = this.type.unwrap();\n    invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');\n\n    const properties = type.properties;\n    const length = properties.length;\n    const keys = new Array(length);\n    for (let i = 0; i < length; i++) {\n      const property = properties[i];\n      keys[i] = context.literal(property.key);\n    }\n    return this.context.union(...keys);\n  }\n\n  toString (): string {\n    return `$Keys<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport ObjectTypeProperty from '../types/ObjectTypeProperty';\nimport FunctionType from '../types/FunctionType';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\ntype Mapper = <V: any, R: any> (v: V) => R;\n\n// Map over the keys and values in an object.\n\nexport default class $ObjMapiType<O: {}, M: Mapper> extends Type<$ObjMapi<O, M>> {\n  typeName: string = '$ObjMapiType';\n\n  object: Type<O>;\n  mapper: Type<M>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key), prop.value);\n\n      const value = input[prop.key];\n      yield* returnType.errors(validation, path.concat(prop.key), value);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key), prop.value);\n\n      const value = input[prop.key];\n      if (!returnType.accepts(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$ObjMapi<O, M>> {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    const args = [];\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      args.push(context.property(\n        prop.key,\n        applied.invoke(context.literal(prop.key), prop.value)\n      ));\n    }\n\n    return context.object(...args);\n  }\n\n  toString (): string {\n    return `$ObjMapi<${this.object.toString()}, ${this.mapper.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      object: this.object,\n      mapper: this.mapper\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport ObjectTypeProperty from '../types/ObjectTypeProperty';\nimport FunctionType from '../types/FunctionType';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\ntype Mapper = <V: any, R: any> (v: V) => R;\n\n// Map over the keys in an object.\n\nexport default class $ObjMapType<O: {}, M: Mapper> extends Type<$ObjMap<O, M>> {\n  typeName: string = '$ObjMapType';\n\n  object: Type<O>;\n  mapper: Type<M>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key));\n\n      const value = input[prop.key];\n      yield* returnType.errors(validation, path.concat(prop.key), value);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const returnType = applied.invoke(context.literal(prop.key));\n\n      const value = input[prop.key];\n      if (!returnType.accepts(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$ObjMap<O, M>> {\n\n    let {object, mapper, context} = this;\n    const target = object.unwrap();\n    invariant(target instanceof ObjectType, 'Target must be an object type.');\n\n    const args = [];\n\n    for (const prop: ObjectTypeProperty<*, *> of target.properties) {\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      args.push(context.property(\n        prop.key,\n        applied.invoke(context.literal(prop.key))\n      ));\n    }\n\n    return context.object(...args);\n  }\n\n  toString (): string {\n    return `$ObjMap<${this.object.toString()}, ${this.mapper.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      object: this.object,\n      mapper: this.mapper\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport compareTypes from '../compareTypes';\nimport invariant from '../invariant';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// The type of the named object property\n\nexport default class $PropertyType<O: {}, P: string | number | Symbol> extends Type {\n  typeName: string = '$PropertyType';\n\n  object: Type<O>;\n\n  property: P;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.unwrap().errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.unwrap().accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<*> {\n    const {object, property} = this;\n    const unwrapped = object.unwrap();\n    invariant(typeof unwrapped.getProperty === 'function', 'Can only use $PropertyType on Objects.');\n    return unwrapped.getProperty(property).unwrap();\n  }\n\n  toString (): string {\n    return `$PropertyType<${this.object.toString()}, ${String(this.property)}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      object: this.object,\n      property: this.property\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport ObjectType from '../types/ObjectType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// An object of type $Shape<T> does not have to have all of the properties\n// that type T defines. But the types of the properties that it does have\n// must accepts the types of the same properties in T.\n\nexport default class $ShapeType<T> extends Type<$Shape<T>> {\n  typeName: string = '$ShapeType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {type} = this;\n\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      yield [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];\n      return;\n    }\n\n    type = type.unwrap();\n    invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');\n\n    for (const key in input) { // eslint-disable-line guard-for-in\n      const property = type.getProperty(key);\n      if (!property) {\n        continue;\n      }\n      yield* property.errors(validation, path, input);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {type} = this;\n    if (input === null || (typeof input !== 'object' && typeof input !== 'function')) {\n      return false;\n    }\n    type = type.unwrap();\n    invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');\n    for (const key in input) { // eslint-disable-line guard-for-in\n      const property = type.getProperty(key);\n      if (!property || !property.accepts(input)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Shape<T>> {\n    let {type} = this;\n    type = type.unwrap();\n    const context = this.context;\n    invariant(type instanceof ObjectType, 'Can only $Shape<T> object types.');\n    const properties = type.properties;\n    const args = new Array(properties.length);\n    for (let i = 0; i < properties.length; i++) {\n      const property = properties[i];\n      args[i] = context.property(property.key, property.value, true);\n    }\n    return this.context.object(...args);\n  }\n\n  toString (): string {\n    return `$Shape<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// Any subtype of T\n\nexport default class $SubType<T> extends Type<$Subtype<T>> {\n  typeName: string = '$SubType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(input, path);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Subtype<T>> {\n    return this.type;\n  }\n\n  toString (): string {\n    return `$Subtype<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport compareTypes from '../compareTypes';\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\n// Any, but at least T.\n\nexport default class $SuperType<T> extends Type<$Supertype<T>> {\n  typeName: string = '$SuperType';\n\n  type: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    yield* this.type.errors(validation, path, input);\n  }\n\n  accepts (input: any): boolean {\n    return this.type.accepts(input);\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$Supertype<T>> {\n    return this.type;\n  }\n\n  toString (): string {\n    return `$Supertype<${this.type.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      type: this.type\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport TupleType from '../types/TupleType';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\nimport invariant from '../invariant';\n\nimport FunctionType from '../types/FunctionType';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\ntype Mapper = <V: any, R: any> (v: V) => R;\n\n// Map over the values in a tuple.\n\nexport default class $TupleMapType<T: [], M: Mapper> extends Type<$TupleMap<T, M>> {\n  typeName: string = '$TupleMapType';\n\n  tuple: Type<T>;\n  mapper: Type<M>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    let {tuple, mapper, context} = this;\n    const target = tuple.unwrap();\n    invariant(target instanceof TupleType, 'Target must be a tuple type.');\n\n    if (!context.checkPredicate('Array', input)) {\n      yield [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];\n      return;\n    }\n\n    for (let i = 0; i < target.types.length; i++) {\n      const type = target.types[i];\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      const expected = applied.invoke(type);\n      const value = input[i];\n      yield* expected.errors(validation, path.concat(i), value);\n    }\n  }\n\n  accepts (input: any): boolean {\n    let {tuple, mapper, context} = this;\n    const target = tuple.unwrap();\n    invariant(target instanceof TupleType, 'Target must be a tuple type.');\n\n    if (!context.checkPredicate('Array', input)) {\n      return false;\n    }\n\n    for (let i = 0; i < target.types.length; i++) {\n      const type = target.types[i];\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      if (!applied.invoke(type).accepts(input[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    return compareTypes(this.unwrap(), input);\n  }\n\n  unwrap (): Type<$TupleMap<T, M>> {\n    let {tuple, mapper, context} = this;\n    const target = tuple.unwrap();\n    invariant(target instanceof TupleType, 'Target must be an tuple type.');\n\n    const args = [];\n    for (let i = 0; i < target.types.length; i++) {\n      const type = target.types[i];\n      const applied = mapper.unwrap();\n      invariant(applied instanceof FunctionType, 'Mapper must be a function type.');\n\n      args.push(applied.invoke(type).unwrap().unwrap());\n    }\n\n    return context.tuple(...args);\n  }\n\n  toString (): string {\n    return `$TupleMap<${this.tuple.toString()}, ${this.mapper.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      tuple: this.tuple,\n      mapper: this.mapper\n    };\n  }\n}","/* @flow */\n\nimport Type from '../types/Type';\nimport GenericType from '../types/GenericType';\nimport ClassDeclaration from '../declarations/ClassDeclaration';\nimport TypeParameterApplication from '../types/TypeParameterApplication';\nimport getErrorMessage from '../getErrorMessage';\nimport compareTypes from '../compareTypes';\n\n\nimport type Validation, {ErrorTuple, IdentifierPath} from '../Validation';\n\nexport default class ClassType<T> extends Type {\n  typeName: string = 'ClassType';\n\n  instanceType: Type<T>;\n\n  *errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void> {\n    const {instanceType, context} = this;\n    if (typeof input !== 'function') {\n      yield [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];\n    }\n    const expectedType = instanceType.unwrap();\n    if (expectedType instanceof GenericType && typeof expectedType.impl === 'function') {\n      if (input === expectedType.impl) {\n        return;\n      }\n      else if (expectedType.impl.prototype.isPrototypeOf(input.prototype)) {\n        return;\n      }\n      else {\n        yield [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];\n        return;\n      }\n    }\n    const annotation = context.getAnnotation(input);\n    if (annotation) {\n      if (!expectedType.acceptsType(annotation)) {\n\n        const acceptsInstance = (\n             annotation instanceof ClassDeclaration\n          && expectedType.acceptsType(annotation.body)\n        );\n\n        if (!acceptsInstance) {\n          yield [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];\n        }\n      }\n      return;\n    }\n    let matches;\n    // we're dealing with a type\n    switch (input.typeName) {\n      case 'NumberType':\n      case 'NumericLiteralType':\n        matches = input === Number;\n        break;\n      case 'BooleanType':\n      case 'BooleanLiteralType':\n        matches = input === Boolean;\n        break;\n      case 'StringType':\n      case 'StringLiteralType':\n        matches = input === String;\n        break;\n      case 'ArrayType':\n      case 'TupleType':\n        matches = input === Array;\n        break;\n      default:\n        return;\n    }\n    if (!matches) {\n      yield [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];\n    }\n  }\n\n  accepts (input: any): boolean {\n    const {instanceType, context} = this;\n    if (typeof input !== 'function') {\n        return false;\n      }\n      let expectedType = instanceType.unwrap();\n      if (expectedType instanceof GenericType && typeof expectedType.impl === 'function') {\n        if (input === expectedType.impl) {\n          return true;\n        }\n        else if (typeof expectedType.impl === 'function') {\n          if (expectedType.impl.prototype.isPrototypeOf(input.prototype)) {\n            return true;\n          }\n          else {\n            return false;\n          }\n        }\n      }\n\n      const annotation = context.getAnnotation(input);\n\n      if (annotation) {\n        return expectedType.acceptsType(annotation);\n      }\n      else if (expectedType instanceof TypeParameterApplication) {\n        expectedType = expectedType.parent;\n      }\n\n      if (expectedType instanceof GenericType && typeof expectedType.impl === 'function') {\n        if (expectedType.impl.prototype.isPrototypeOf(input.prototype)) {\n          return true;\n        }\n        else {\n          return false;\n        }\n      }\n\n      // we're dealing with a type\n      switch (input.typeName) {\n        case 'NumberType':\n        case 'NumericLiteralType':\n          return input === Number;\n        case 'BooleanType':\n        case 'BooleanLiteralType':\n          return input === Boolean;\n        case 'StringType':\n        case 'StringLiteralType':\n          return input === String;\n        case 'ArrayType':\n        case 'TupleType':\n          return input === Array;\n        default:\n          return false;\n      }\n  }\n\n  compareWith (input: Type<any>): -1 | 0 | 1 {\n    const {instanceType} = this;\n    if (input instanceof ClassType) {\n      return compareTypes(instanceType, input.instanceType);\n    }\n    return -1;\n  }\n\n  toString (): string {\n    return `Class<${this.instanceType.toString()}>`;\n  }\n\n  toJSON () {\n    return {\n      typeName: this.typeName,\n      instanceType: this.instanceType\n    };\n  }\n}","/* @flow */\n\nimport TypeInferrer from './TypeInferrer';\nimport primitiveTypes from './primitiveTypes';\nimport invariant from './invariant';\n\nimport Validation from './Validation';\n\nimport makeReactPropTypes from './makeReactPropTypes';\n\nimport makeJSONError from './errorReporting/makeJSONError';\nimport makeTypeError from './errorReporting/makeTypeError';\nimport makeWarningMessage from './errorReporting/makeWarningMessage';\n\nimport makeUnion from './makeUnion';\nimport compareTypes from './compareTypes';\nimport {makePropertyDescriptor} from './classDecorators';\n\nimport {flowIntoTypeParameter} from './types/TypeParameter';\n\nimport annotateValue from './annotateValue';\n\nimport type {PropTypeDict} from './makeReactPropTypes';\nimport type {IdentifierPath, ErrorTuple} from './Validation';\n\n\nimport {\n  Type,\n  TypeParameter,\n  TypeBox,\n  TypeReference,\n  TypeTDZ,\n  ParameterizedTypeAlias,\n  TypeAlias,\n  TypeConstructor,\n  GenericType,\n  NullLiteralType,\n  NumberType,\n  NumericLiteralType,\n  BooleanType,\n  BooleanLiteralType,\n  SymbolType,\n  SymbolLiteralType,\n  StringType,\n  StringLiteralType,\n  ArrayType,\n  ObjectType,\n  ObjectTypeCallProperty,\n  ObjectTypeIndexer,\n  ObjectTypeProperty,\n  FlowIntoType,\n  FunctionType,\n  ParameterizedFunctionType,\n  FunctionTypeParam,\n  FunctionTypeRestParam,\n  FunctionTypeReturn,\n  GeneratorType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  NullableType,\n  ThisType,\n  TupleType,\n  UnionType,\n  IntersectionType,\n  VoidType,\n  RefinementType\n} from './types';\n\nimport {\n  Declaration,\n  TypeDeclaration,\n  VarDeclaration,\n  ModuleDeclaration,\n  ModuleExportsDeclaration,\n  ClassDeclaration,\n  ParameterizedClassDeclaration,\n  ExtendsDeclaration\n} from './declarations';\n\nimport {\n  $DiffType,\n  $FlowFixMeType,\n  $KeysType,\n  $ObjMapiType,\n  $ObjMapType,\n  $PropertyType as _$PropertyType,\n  $ShapeType,\n  $SubType,\n  $SuperType,\n  $TupleMapType,\n  ClassType\n} from './flowTypes';\n\nimport {\n  ParentSymbol,\n  NameRegistrySymbol,\n  ModuleRegistrySymbol,\n  CurrentModuleSymbol,\n  TypeConstructorRegistrySymbol,\n  TypeParametersSymbol,\n  InferrerSymbol,\n  TypePredicateRegistrySymbol,\n  TypeSymbol\n} from './symbols';\n\nimport type {\n  TypeConstraint,\n  TypeCreator,\n  TypeRevealer,\n  FunctionBodyCreator,\n  ApplicableType,\n  ValidFunctionBody,\n  ObjectPropertyDict,\n  ValidObjectBody\n} from './types';\n\nimport type {\n  ClassBodyCreator,\n  ValidClassBody\n} from './declarations';\n\nexport type TypeConstructorConfig = {\n  name: string;\n  impl?: Function;\n  typeName: string;\n  errors (validation: Validation<any>, path: IdentifierPath, input: any): Generator<ErrorTuple, void, void>;\n  accepts (input: any, ...typeInstances: Type<any>[]): boolean;\n  inferTypeParameters (input: any): Type<any>[];\n};\n\nexport type TypePredicate = (input: any) => boolean;\n\ntype NameRegistry = {\n  [name: string]: Type<any> | Class<TypeConstructor<any>>;\n};\n\ntype TypePredicateRegistry = {\n  [name: string]: TypePredicate;\n};\n\ntype ModuleRegistry = {\n  [name: string]: ModuleDeclaration;\n};\n\ntype TypeConstructorRegistry = Map<Function, Class<TypeConstructor<any>>>;\n\nexport type MatchClause<P, R> = (...params: P[]) => R;\nexport type PatternMatcher<P, R> = (...params: P[]) => R;\n\nexport type CheckMode\n  = 'assert'\n  | 'warn'\n  ;\n\n\n/**\n * Keeps track of invalid references in order to prevent\n * multiple warnings.\n */\nconst warnedInvalidReferences: WeakSet<any> = new WeakSet();\n\nexport default class TypeContext {\n\n  /**\n   * Calls to `t.check(...)` will call either\n   * `t.assert(...)` or `t.warn(...)` depending on this setting.\n   */\n  mode: CheckMode = 'assert';\n\n  // @flowIssue 252\n  [ParentSymbol]: ? TypeContext;\n\n  // @flowIssue 252\n  [NameRegistrySymbol]: NameRegistry = {};\n\n  // @flowIssue 252\n  [TypePredicateRegistrySymbol]: TypePredicateRegistry = {};\n\n  // @flowIssue 252\n  [TypeConstructorRegistrySymbol]: TypeConstructorRegistry = new Map();\n\n  // @flowIssue 252\n  [InferrerSymbol]: TypeInferrer = new TypeInferrer(this);\n\n  // @flowIssue 252\n  [ModuleRegistrySymbol]: ModuleRegistry = {};\n\n  // @flowIssue 252\n  [CurrentModuleSymbol]: ? ModuleDeclaration;\n\n\n  makeJSONError <T> (validation: Validation<T>): ? Array<Object> {\n    return makeJSONError(validation);\n  }\n\n  makeTypeError <T> (validation: Validation<T>): ? TypeError {\n    return makeTypeError(validation);\n  }\n\n  createContext (): TypeContext {\n    const context = new TypeContext();\n    // @flowIssue 252\n    context[ParentSymbol] = this;\n    return context;\n  }\n\n  typeOf <T> (input: T): Type<T> {\n\n    const annotation = this.getAnnotation(input);\n    if (annotation) {\n      return annotation;\n    }\n    // @flowIssue 252\n    const inferrer = this[InferrerSymbol];\n    (inferrer: TypeInferrer);\n\n    return inferrer.infer(input);\n  }\n\n  compareTypes (a: Type<any>, b: Type<any>): -1 | 0 | 1 {\n    return compareTypes(a, b);\n  }\n\n  get (name: string, ...propertyNames: string[]): ? Type<any> {\n    // @flowIssue 252\n    const item = this[NameRegistrySymbol][name];\n    if (item != null) {\n      let current = typeof item === 'function'\n                  ? new item(this)\n                  : item\n                  ;\n      for (let i = 0; i < propertyNames.length; i++) {\n        const propertyName = propertyNames[i];\n        if (typeof current.getProperty !== 'function') {\n          return;\n        }\n        current = current.getProperty(propertyName);\n        if (!current) {\n          return;\n        }\n        current = current.unwrap();\n      }\n      return current;\n    }\n    // @flowIssue 252\n    const parent = this[ParentSymbol];\n    if (parent) {\n      const fromParent = parent.get(name, ...propertyNames);\n      if (fromParent) {\n        return fromParent;\n      }\n    }\n\n    // if we got this far, see if we have a global type with this name.\n    if (typeof global[name] === 'function') {\n      const target = new GenericType(this);\n      target.name = name;\n      target.impl = global[name];\n      // @flowIssue 252\n      this[NameRegistrySymbol][name] = target;\n      return target;\n    }\n  }\n\n  /**\n   * Get the predicate for a given type name.\n   * e.g. `t.getPredicate('Array')`.\n   */\n  getPredicate (name: string): ? TypePredicate {\n    const item: ? TypePredicate = (this: any)[TypePredicateRegistrySymbol][name];\n    if (item) {\n      return item;\n    }\n    const parent: ? TypeContext = (this: any)[ParentSymbol];\n    if (parent) {\n      return parent.getPredicate(name);\n    }\n  }\n\n  /**\n   * Set the predicate for a given type name.\n   * This can be used to customise the behaviour of things like Array\n   * detection or allowing Thenables in place of the global Promise.\n   */\n  setPredicate (name: string, predicate: TypePredicate) {\n    (this: any)[TypePredicateRegistrySymbol][name] = predicate;\n  }\n\n  /**\n   * Check the given value against the named predicate.\n   * Returns false if no such predicate exists.\n   * e.g. `t.checkPredicate('Array', [1, 2, 3])`\n   */\n  checkPredicate (name: string, input: any): boolean {\n    const predicate = this.getPredicate(name);\n    if (predicate) {\n      return predicate(input);\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Returns a decorator for a function or object with the given type.\n   */\n  decorate (type: (() => Type<any>) | Type<any>, shouldAssert?: boolean): * {\n    if (shouldAssert == null) {\n      shouldAssert = this.mode === 'assert';\n    }\n    return (input: Object | Function, propertyName?: string, descriptor?: Object): * => {\n      if (descriptor && typeof propertyName === 'string') {\n        return makePropertyDescriptor(type, input, propertyName, descriptor, Boolean(shouldAssert));\n      }\n      else {\n        invariant(typeof type !== 'function', 'Cannot decorate an object or function as a method.');\n        return this.annotate(input, type);\n      }\n    };\n  }\n\n  /**\n   * Annotates an object or function with the given type.\n   * If a type is specified as the sole argument, returns a\n   * function which can decorate classes or functions with the given type.\n   */\n  annotate <T> (input: Type<T> | T, type?: Type<T>) {\n    if (type === undefined) {\n      return annotateValue(input);\n    }\n    else {\n      return annotateValue(input, type);\n    }\n  }\n\n  getAnnotation <T> (input: T): ? Type<T> {\n    if ((input !== null && typeof input === 'object') || typeof input === 'function') {\n      // @flowIssue 252\n      return input[TypeSymbol];\n    }\n  }\n\n  hasAnnotation (input: any): boolean {\n    if (input == null) {\n      return false;\n    }\n    else {\n      return input[TypeSymbol] ? true : false;\n    }\n  }\n\n  setAnnotation <T: Object | Function> (input: T, type: Type<T>): T {\n    input[TypeSymbol] = type;\n    return input;\n  }\n\n  type <T> (name: string, type: Type<T> | TypeCreator<Type<T>>): TypeAlias<T> | ParameterizedTypeAlias<T> {\n    if (typeof type === 'function') {\n      const target = new ParameterizedTypeAlias(this);\n      target.name = name;\n      target.typeCreator = type;\n      return target;\n    }\n    else {\n      const target = new TypeAlias(this);\n      target.name = name;\n      target.type = type;\n      return target;\n    }\n  }\n\n  declare <T: any, D: ModuleDeclaration | TypeDeclaration<T> | VarDeclaration<T> | ClassDeclaration<T>> (name: string | D, type?: Type<T> | TypeCreator<Type<T>>): D | TypeDeclaration<T> {\n\n    if (name instanceof Declaration) {\n      type = name;\n      name = type.name;\n    }\n    else if (name instanceof TypeAlias) {\n      type = name;\n      name = type.name;\n    }\n    if (typeof type === 'function') {\n      type = this.type(name, type);\n    }\n    if (type instanceof ModuleDeclaration) {\n      const moduleRegistry: ModuleRegistry = (this: $FlowIssue<252>)[ModuleRegistrySymbol];\n      moduleRegistry[name] = type;\n      return type;\n    }\n    else {\n      invariant(typeof name === 'string', 'Name must be a string');\n      invariant(type instanceof Type, 'Type must be supplied to declaration');\n      const nameRegistry: NameRegistry = (this: $FlowIssue<252>)[NameRegistrySymbol];\n\n      if (type instanceof Declaration) {\n        nameRegistry[name] = type;\n        return type;\n      }\n      else if (type instanceof TypeAlias || type instanceof ParameterizedTypeAlias) {\n        const target = new TypeDeclaration(this);\n        target.name = name;\n        target.typeAlias = type;\n        nameRegistry[name] = target;\n        return target;\n      }\n      else {\n        const target = this.var(name, type);\n        nameRegistry[name] = target;\n        return target;\n      }\n    }\n  }\n\n  *declarations (): Generator<[string, Type<any> | TypeConstructor<any>], void, void> {\n    const nameRegistry: NameRegistry = (this: $FlowIssue<252>)[NameRegistrySymbol];\n    for (const key in nameRegistry) { // eslint-disable-line guard-for-in\n      yield [key, nameRegistry[key]];\n    }\n  }\n\n  *modules (): Generator<ModuleDeclaration, void, void> {\n    const moduleRegistry: ModuleRegistry = (this: $FlowIssue<252>)[ModuleRegistrySymbol];\n    for (const key in moduleRegistry) { // eslint-disable-line guard-for-in\n      yield moduleRegistry[key];\n    }\n  }\n\n  import (moduleName: string): ? ModuleDeclaration {\n    const moduleRegistry: ModuleRegistry = (this: $FlowIssue<252>)[ModuleRegistrySymbol];\n    if (moduleRegistry[moduleName]) {\n      return moduleRegistry[moduleName];\n    }\n    const [head] = moduleName.split('/');\n    const module = moduleRegistry[head];\n    if (module) {\n      return module.import(moduleName);\n    }\n    const parent = (this: $FlowIssue<252>)[ParentSymbol];\n    if (parent) {\n      return parent.import(moduleName);\n    }\n  }\n\n  declareTypeConstructor ({name, impl, typeName, errors, accepts, inferTypeParameters}: TypeConstructorConfig): TypeConstructor<any> {\n    const nameRegistry: NameRegistry = (this: $FlowIssue<252>)[NameRegistrySymbol];\n\n    if (nameRegistry[name]) {\n      this.emitWarningMessage(`Redeclaring type: ${name}, this may be unintended.`);\n    }\n\n    const target = new TypeConstructor(this);\n    target.name = name;\n    target.typeName = typeName;\n    target.impl = impl;\n    target.errors = errors;\n    target.accepts = accepts;\n    target.inferTypeParameters = inferTypeParameters;\n\n    nameRegistry[name] = target;\n\n    if (typeof impl === 'function') {\n      // @flowIssue 252\n      const handlerRegistry = this[TypeConstructorRegistrySymbol];\n      (handlerRegistry: TypeConstructorRegistry);\n\n      if (handlerRegistry.has(impl)) {\n        this.emitWarningMessage(`A type handler already exists for the given implementation of ${name}.`);\n      }\n      handlerRegistry.set(impl, target);\n    }\n    return target;\n  }\n\n  getTypeConstructor (impl: Function): ? TypeConstructor<any> {\n    // @flowIssue 252\n    const handlerRegistry = this[TypeConstructorRegistrySymbol];\n    (handlerRegistry: TypeConstructorRegistry);\n\n    return handlerRegistry.get(impl);\n  }\n\n  literal <T: void | null | boolean | number | string | Symbol> (input: T): Type<T> {\n    if (input === undefined) {\n      return this.void();\n    }\n    else if (input === null) {\n      return this.null();\n    }\n    else if (typeof input === 'boolean') {\n      return this.boolean(input);\n    }\n    else if (typeof input === 'number') {\n      return this.number(input);\n    }\n    else if (typeof input === 'string') {\n      return this.string(input);\n    }\n    // @flowIssue 252\n    else if (typeof input === 'symbol') {\n      return this.symbol(input);\n    }\n    else {\n      return this.typeOf(input);\n    }\n  }\n\n  null (): NullLiteralType {\n    return primitiveTypes.null;\n  }\n\n  nullable <T> (type: Type<T>): NullableType<? T> {\n    const target = new NullableType(this);\n    target.type = type;\n    return target;\n  }\n\n  existential (): ExistentialType {\n    return primitiveTypes.existential;\n  }\n\n\n  empty (): EmptyType {\n    return primitiveTypes.empty;\n  }\n\n  any (): AnyType {\n    return primitiveTypes.any;\n  }\n\n  mixed (): MixedType {\n    return primitiveTypes.mixed;\n  }\n\n  void (): VoidType {\n    return primitiveTypes.void;\n  }\n\n  this <T> (input?: T): ThisType<T> {\n    const target = new ThisType(this);\n    if (input !== undefined) {\n      target.recorded = input;\n    }\n    return target;\n  }\n\n  number <T: number> (input?: T): NumberType | NumericLiteralType<T> {\n    if (input !== undefined) {\n      const target = new NumericLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.number;\n    }\n  }\n\n  boolean <T: boolean> (input?: T): BooleanType | BooleanLiteralType<T> {\n    if (input !== undefined) {\n      const target = new BooleanLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.boolean;\n    }\n  }\n\n  string <T: string> (input?: T): StringType | StringLiteralType<T> {\n    if (input !== undefined) {\n      const target = new StringLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.string;\n    }\n  }\n\n  symbol <T: Symbol> (input?: T): SymbolType | SymbolLiteralType<T> {\n    if (input !== undefined) {\n      const target = new SymbolLiteralType(this);\n      target.value = input;\n      return target;\n    }\n    else {\n      return primitiveTypes.symbol;\n    }\n  }\n\n  typeParameter <T> (id: string, bound?: Type<T>, defaultType?: Type<T>): TypeParameter<T> {\n    const target = new TypeParameter(this);\n    target.id = id;\n    target.bound = bound;\n    target.default = defaultType;\n    return target;\n  }\n\n  flowInto <T> (typeParameter: TypeParameter<T>): FlowIntoType<T> {\n    return flowIntoTypeParameter(typeParameter);\n  }\n\n  /**\n   * Bind the type parameters for the parent class of the given instance.\n   */\n  bindTypeParameters <T: {}> (subject: T, ...typeInstances: Type<any>[]): T {\n\n    const instancePrototype = Object.getPrototypeOf(subject);\n    // @flowIssue\n    const parentPrototype = instancePrototype && Object.getPrototypeOf(instancePrototype);\n    // @flowIssue\n    const parentClass = parentPrototype && parentPrototype.constructor;\n\n    if (!parentClass) {\n      this.emitWarningMessage('Could not bind type parameters for non-existent parent class.');\n      return subject;\n    }\n    // @flowIssue 252\n    const typeParametersPointer = parentClass[TypeParametersSymbol];\n\n    if (typeParametersPointer) {\n      const typeParameters = subject[typeParametersPointer];\n      const keys = Object.keys(typeParameters);\n      const length = Math.min(keys.length, typeInstances.length);\n      for (let i = 0; i < length; i++) {\n        const typeParam = typeParameters[keys[i]];\n        typeParam.bound = typeInstances[i];\n      }\n    }\n    return subject;\n  }\n\n  module (name: string, body: (context: TypeContext) => any): ModuleDeclaration {\n    const target = new ModuleDeclaration(this);\n    target.name = name;\n    const innerContext = this.createContext();\n    // @flowIssue 252\n    innerContext[ParentSymbol] = this;\n    // @flowIssue 252\n    innerContext[CurrentModuleSymbol] = target;\n\n    target.innerContext = innerContext;\n    body(innerContext);\n    return target;\n  }\n\n  moduleExports <T> (type: Type<T>): ModuleExportsDeclaration<T> {\n    const currentModule: ModuleDeclaration = (this: $FlowIssue<252>)[CurrentModuleSymbol];\n    if (!currentModule) {\n      throw new Error('Cannot declare module.exports outside of a module.');\n    }\n    const target = new ModuleExportsDeclaration(this);\n    target.type = type;\n    currentModule.moduleExports = target;\n    return target;\n  }\n\n  var <T> (name: string, type: Type<T>): VarDeclaration<T> {\n    const target = new VarDeclaration(this);\n    target.name = name;\n    target.type = type;\n    return target;\n  }\n\n  class <X, O: {}> (name: string, head?: ClassBodyCreator<X, O> | ValidClassBody<X, O>, ...tail: Array<ValidClassBody<X, O>>): ClassDeclaration<O> {\n    if (typeof head === 'function') {\n      const target = new ParameterizedClassDeclaration(this);\n      target.name = name;\n      target.bodyCreator = head;\n      return target;\n    }\n    const target = new ClassDeclaration(this);\n    target.name = name;\n    if (head != null) {\n      tail.unshift(head);\n    }\n    const {length} = tail;\n    const properties = [];\n    let body;\n\n    for (let i = 0; i < length; i++) {\n      const item = tail[i];\n      if (item instanceof ObjectTypeProperty) {\n        properties.push(item);\n      }\n      else if (item instanceof ObjectType) {\n        invariant(!body, 'Class body must only be declared once.');\n        body = item;\n      }\n      else if (item instanceof ExtendsDeclaration) {\n        invariant(!target.superClass, 'Classes can only have one super class.');\n        target.superClass = item;\n      }\n      else if (item != null && typeof item === 'object' && !(item instanceof Type)) {\n        for (const propertyName in item) { // eslint-disable-line\n          properties.push(this.property(propertyName, (item: any)[propertyName]));\n        }\n      }\n      else {\n        throw new Error('ClassDeclaration cannot contain the given type directly.');\n      }\n    }\n    if (!body) {\n      body = new ObjectType(this);\n    }\n    if (properties.length) {\n      body.properties.push(...properties);\n    }\n    target.body = body;\n    return target;\n  }\n\n  extends <T, P> (subject: string | ApplicableType<T> | Function, ...typeInstances: Type<P>[]): ExtendsDeclaration<T> {\n    const target = new ExtendsDeclaration(this);\n    target.type = this.ref(subject, ...typeInstances);\n    return target;\n  }\n\n  fn <X, P, R> (head: FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ParameterizedFunctionType<X, P, R> | FunctionType<P, R> {\n    return this.function(head, ...tail);\n  }\n\n  function <X, P, R> (head: ? FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ParameterizedFunctionType<X, P, R> | FunctionType<P, R> {\n    if (typeof head === 'function') {\n      const target = new ParameterizedFunctionType(this);\n      target.bodyCreator = head;\n      return target;\n    }\n    const target = new FunctionType(this);\n    if (head != null) {\n      tail.unshift(head);\n      const {length} = tail;\n      for (let i = 0; i < length; i++) {\n        const item = tail[i];\n        if (item instanceof FunctionTypeParam) {\n          target.params.push(item);\n        }\n        else if (item instanceof FunctionTypeRestParam) {\n          target.rest = item;\n        }\n        else if (item instanceof FunctionTypeReturn) {\n          target.returnType = item;\n        }\n        else {\n          throw new Error('FunctionType cannot contain the given type directly.');\n        }\n      }\n    }\n    if (!target.returnType) {\n      target.returnType = this.any();\n    }\n    return target;\n  }\n\n  param <T> (name: string, type: Type<T>, optional: boolean = false): FunctionTypeParam<T> {\n    const target = new FunctionTypeParam(this);\n    target.name = name;\n    target.type = type;\n    target.optional = optional;\n    return target;\n  }\n\n  rest <T> (name: string, type: Type<T>): FunctionTypeRestParam<T> {\n    const target = new FunctionTypeRestParam(this);\n    target.name = name;\n    target.type = type;\n    return target;\n  }\n\n  return <T> (type: Type<T>): FunctionTypeReturn<T> {\n    const target =  new FunctionTypeReturn(this);\n    target.type = type;\n    return target;\n  }\n\n  generator <Y, R, N> (yieldType: Type<Y>, returnType?: Type<R>, nextType?: Type<N>): GeneratorType<Y, R, N> {\n    const target = new GeneratorType(this);\n    target.yieldType = yieldType;\n    target.returnType = returnType || this.any();\n    target.nextType = nextType || this.any();\n    return target;\n  }\n\n  object <T: {}> (head: ? ValidObjectBody<T> | $ObjMap<T, <V>(v: V) => Type<V>>, ...tail: ValidObjectBody<T>[]): ObjectType<T> {\n    const target = new ObjectType(this);\n    if (head != null && typeof head === 'object' && !(head instanceof Type)) {\n      for (const propertyName in head) { // eslint-disable-line\n        target.properties.push(this.property(propertyName, head[propertyName]));\n      }\n    }\n    else {\n      let body;\n      if (head) {\n        body = [head, ...tail];\n      }\n      else {\n        body = tail;\n      }\n      const {length} = body;\n      for (let i = 0; i < length; i++) {\n        const item = body[i];\n        if (item instanceof ObjectTypeProperty) {\n          target.properties.push(item);\n        }\n        else if (item instanceof ObjectTypeIndexer) {\n          target.indexers.push(item);\n        }\n        else if (item instanceof ObjectTypeCallProperty) {\n          target.callProperties.push(item);\n        }\n        else {\n          throw new Error('ObjectType cannot contain the given type directly.');\n        }\n      }\n    }\n    return target;\n  }\n\n  exactObject <T: {}> (head: ? ValidObjectBody<T> | $ObjMap<T, <V>(v: V) => Type<V>>, ...tail: ValidObjectBody<T>[]): ObjectType<T> {\n    const object = this.object(head, ...tail);\n    object.exact = true;\n    return object;\n  }\n\n  callProperty <T> (value: Type<T>): ObjectTypeCallProperty<T> {\n    const target = new ObjectTypeCallProperty(this);\n    target.value = value;\n    return target;\n  }\n\n  property <K: string | number, V> (key: K, value: Type<V> | ObjectPropertyDict<{}>, optional: boolean = false): ObjectTypeProperty<K, V> {\n    const target = new ObjectTypeProperty(this);\n    target.key = key;\n    if (value instanceof Type) {\n      target.value = value;\n    }\n    else {\n      target.value = this.object(value);\n    }\n    target.optional = optional;\n    return target;\n  }\n\n  indexer <K, V> (id: string, key: Type<K>, value: Type<V>): ObjectTypeIndexer<K, V> {\n    const target = new ObjectTypeIndexer(this);\n    target.id = id;\n    target.key = key;\n    target.value = value;\n    return target;\n  }\n\n  method <K: string | number, X, P, R> (name: K, head: FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ObjectTypeProperty<K, (...params: P[]) => R> {\n    const target = new ObjectTypeProperty(this);\n    target.key = name;\n    target.value = this.function(head, ...tail);\n    return target;\n  }\n\n  staticCallProperty <T: Function> (value: Type<T>): ObjectTypeCallProperty<T> {\n    const prop = this.callProperty(value);\n    (prop: $FlowIssue).static = true;\n    return prop;\n  }\n\n  staticProperty <K: string | number, V> (key: K, value: Type<V> | ObjectPropertyDict<{}>, optional: boolean = false): ObjectTypeProperty<K, V> {\n    const prop = this.property(key, value, optional);\n    (prop: $FlowIssue).static = true;\n    return prop;\n  }\n\n  staticMethod <K: string | number, X, P, R> (name: K, head: FunctionBodyCreator<X, P, R> | ValidFunctionBody<X, P, R>, ...tail: Array<ValidFunctionBody<X, P, R>>): ObjectTypeProperty<K, (...params: P[]) => R> {\n    const prop = this.method(name, head, ...tail);\n    (prop: $FlowIssue).static = true;\n    return prop;\n  }\n\n  tuple <T> (...types: Type<T>[]): TupleType<any> {\n    const target = new TupleType(this);\n    target.types = types;\n    return target;\n  }\n\n  array <T> (elementType?: Type<T>): ArrayType<T> {\n    const target = new ArrayType(this);\n    target.elementType = elementType || this.any();\n    return target;\n  }\n\n  union <T> (...types: Type<T>[]): UnionType<T> {\n    return makeUnion(this, types);\n  }\n\n  intersect <T: {}> (...types: Type<T>[]): IntersectionType<T> {\n    const target = new IntersectionType(this);\n    target.types = types;\n    return target;\n  }\n\n  intersection <T: {}> (...types: Type<T>[]): IntersectionType<T> {\n    return this.intersect(...types);\n  }\n\n  box <T> (reveal: TypeRevealer<T>): TypeBox<T> {\n    const box = new TypeBox(this);\n    box.reveal = reveal;\n    return box;\n  }\n\n  tdz <T> (reveal: TypeRevealer<T>, name?: string): TypeTDZ<T> {\n    const tdz = new TypeTDZ(this);\n    tdz.reveal = reveal;\n    tdz.name = name;\n    return tdz;\n  }\n\n  ref <T, P> (subject: string | ApplicableType<T> | Function, ...typeInstances: Type<P>[]): Type<T | any> {\n    let target;\n    if (typeof subject === 'string') {\n      // try and eagerly resolve the reference\n      target = this.get(subject);\n      if (!target) {\n        // defer dereferencing for now\n        target = new TypeReference(this);\n        target.name = subject;\n      }\n    }\n    else if (typeof subject === 'function') {\n      // @flowIssue 252\n      const handlerRegistry = this[TypeConstructorRegistrySymbol];\n      (handlerRegistry: TypeConstructorRegistry);\n\n      // see if we have a dedicated TypeConstructor for this.\n      target = handlerRegistry.get(subject);\n\n      if (!target) {\n        // just use a generic type handler.\n        target = new GenericType(this);\n        target.impl = subject;\n        target.name = subject.name;\n      }\n\n    }\n    else if (subject instanceof Type) {\n      target = subject;\n    }\n    else {\n      if (subject == null || typeof subject !== 'object') {\n        this.emitWarningMessage(`Could not reference the given type, try t.typeOf(value) instead. (got ${String(subject)})`);\n      }\n      else if (!warnedInvalidReferences.has(subject)) {\n        this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead.');\n        warnedInvalidReferences.add(subject);\n      }\n      return this.any();\n    }\n\n    if (typeInstances.length) {\n      invariant(typeof target.apply === 'function', `Cannot apply non-applicable type: ${target.typeName}.`);\n      return target.apply(...typeInstances);\n    }\n    else {\n      return target;\n    }\n  }\n\n  validate <T> (type: Type<T>, input: any, prefix: string = '', path?: string[]): Validation<T> {\n    const validation = new Validation(this, input);\n    if (path) {\n      validation.path.push(...path);\n    }\n    else if (typeof type.name === 'string') {\n      validation.path.push(type.name);\n    }\n    validation.prefix = prefix;\n    validation.errors = Array.from(type.errors(validation, [], input));\n    return validation;\n  }\n\n  check <T, V: T | any> (type: Type<T>, input: V, prefix: string = '', path?: string[]): V {\n    if (this.mode === 'assert') {\n      return this.assert(type, input, prefix, path);\n    }\n    else {\n      return this.warn(type, input, prefix, path);\n    }\n  }\n\n  assert <T, V: T | any> (type: Type<T>, input: V, prefix: string = '', path?: string[]): V {\n    const validation = this.validate(type, input, prefix, path);\n    const error = this.makeTypeError(validation);\n    if (error) {\n      throw error;\n    }\n    return input;\n  }\n\n  warn <T, V: T | any> (type: Type<T>, input: V, prefix: string = '', path?: string[]): V {\n    const validation = this.validate(type, input, prefix, path);\n    const message = makeWarningMessage(validation);\n    if (typeof message === 'string') {\n      this.emitWarningMessage(message);\n    }\n    return input;\n  }\n\n  /**\n   * Emits a warning message, using `console.warn()` by default.\n   */\n  emitWarningMessage (message: string): void {\n    console.warn('flow-runtime:', message);\n  }\n\n  propTypes <T: {}> (type: Type<T>): PropTypeDict<T> {\n    return makeReactPropTypes((type.unwrap(): $FlowIgnore));\n  }\n\n  match <P, R> (...args: Array<P | MatchClause<P, R>>): R {\n    const clauses: any = args.pop();\n    if (!Array.isArray(clauses)) {\n      throw new Error('Invalid pattern, last argument must be an array.');\n    }\n    (clauses: MatchClause<P, R>[]);\n    const pattern = this.pattern(...clauses);\n    return pattern(...args);\n  }\n\n  pattern <P, R> (...clauses: MatchClause<P, R>[]): PatternMatcher<P, R> {\n    const {length} = clauses;\n    const tests: Array<true | FunctionType<P, R> | ParameterizedFunctionType<any, P, R>> = new Array(length);\n    for (let i = 0; i < length; i++) {\n      const clause = clauses[i];\n      const annotation = this.getAnnotation(clause);\n      if (!annotation) {\n        if (i !== length - 1) {\n          throw new Error(`Invalid Pattern - found unannotated function in position ${i}, default clauses must be last.`);\n        }\n        tests[i] = true;\n      }\n      else {\n        invariant(annotation instanceof FunctionType || annotation instanceof ParameterizedFunctionType, 'Pattern clauses must be annotated functions.');\n        tests[i] = annotation;\n      }\n    }\n    return (...args: P[]): R => {\n      for (let i = 0; i < tests.length; i++) {\n        const test = tests[i];\n        const clause = clauses[i];\n        if (test === true) {\n          return clause(...args);\n        }\n        else if (test.acceptsParams(...args)) {\n          return clause(...args);\n        }\n      }\n      const error = new TypeError('Value did not match any of the candidates.');\n      error.name = 'RuntimeTypeError';\n      throw error;\n    };\n  }\n\n  wrapIterator <T> (type: Type<T>): (input: Iterable<T>) => Generator<T, void, void> {\n    const t = this;\n    return function* wrappedIterator (input: Iterable<T>): Generator<T, void, void> {\n      for (const item of input) {\n        yield t.check(type, item);\n      }\n    };\n  }\n\n  refinement <T> (type: Type<T>, ...constraints: TypeConstraint[]): RefinementType<T> {\n    const target = new RefinementType(this);\n    target.type = type;\n    target.addConstraint(...constraints);\n    return target;\n  }\n\n\n  $diff <A: {}, B: {}> (aType: Type<A>, bType: Type<B>): $DiffType<A, B> {\n    const target = new $DiffType(this);\n    target.aType = aType;\n    target.bType = bType;\n    return target;\n  }\n\n  $flowFixMe (): $FlowFixMeType {\n    return new $FlowFixMeType(this);\n  }\n\n  $keys <T: {}> (type: Type<T>): $KeysType<T> {\n    const target = new $KeysType(this);\n    target.type = type;\n    return target;\n  }\n\n  $objMap <O: {}, K: $Keys<O>, M: (k: K) => any> (object: Type<O>, mapper: Type<M>): $ObjMapType<O, M> {\n    const target = new $ObjMapType(this);\n    target.object = object;\n    target.mapper = mapper;\n    return target;\n  }\n\n  $objMapi <O: {}, K: $Keys<O>, M: (k: K, v: any) => any> (object: Type<O>, mapper: Type<M>): $ObjMapiType<O, M> {\n    const target = new $ObjMapiType(this);\n    target.object = object;\n    target.mapper = mapper;\n    return target;\n  }\n\n  $propertyType <O: {}, P: string | number | Symbol> (object: Type<O>, property: P | Type<P>): _$PropertyType<O, P> {\n    const target = new _$PropertyType(this);\n    target.object = object;\n    if (property instanceof Type) {\n      const unwrapped = property.unwrap();\n      target.property = (unwrapped: any).value;\n    }\n    else {\n      target.property = property;\n    }\n    return target;\n  }\n\n  $shape <T: {}> (type: Type<T>): $ShapeType<T> {\n    const target = new $ShapeType(this);\n    target.type = type;\n    return target;\n  }\n\n  $subtype <T: {}> (type: Type<T>): $SubType<T> {\n    const target = new $SubType(this);\n    target.type = type;\n    return target;\n  }\n\n  $supertype <T: {}> (type: Type<T>): $SuperType<T> {\n    const target = new $SuperType(this);\n    target.type = type;\n    return target;\n  }\n\n  $tupleMap <T: [], M: (v: *) => *> (tuple: Type<T>, mapper: Type<M>): $TupleMapType<T, M> {\n    const target = new $TupleMapType(this);\n    target.tuple = tuple;\n    target.mapper = mapper;\n    return target;\n  }\n\n  Class <T: {}> (instanceType: Type<T>): ClassType<T> {\n    const target = new ClassType(this);\n    target.instanceType = instanceType;\n    return target;\n  }\n}\n\n","/* @flow */\n\nimport registerPrimitiveTypes from './registerPrimitiveTypes';\nimport registerBuiltinTypeConstructors from './registerBuiltins';\nimport registerTypePredicates from './registerTypePredicates';\n\nimport TypeContext from './TypeContext';\n\nconst globalContext = new TypeContext();\nregisterPrimitiveTypes(globalContext);\nregisterBuiltinTypeConstructors(globalContext);\nregisterTypePredicates(globalContext);\n\n\nexport default globalContext;","/* @flow */\n\nimport globalContext from './globalContext';\n\nimport {\n  Type,\n  TypeParameter,\n  TypeBox,\n  TypeReference,\n  TypeTDZ,\n  ParameterizedTypeAlias,\n  TypeAlias,\n  TypeConstructor,\n  GenericType,\n  NullLiteralType,\n  NumberType,\n  NumericLiteralType,\n  BooleanType,\n  BooleanLiteralType,\n  SymbolType,\n  SymbolLiteralType,\n  StringType,\n  StringLiteralType,\n  ArrayType,\n  ObjectType,\n  ObjectTypeCallProperty,\n  ObjectTypeIndexer,\n  ObjectTypeProperty,\n  FlowIntoType,\n  FunctionType,\n  ParameterizedFunctionType,\n  PartialType,\n  FunctionTypeParam,\n  FunctionTypeRestParam,\n  FunctionTypeReturn,\n  GeneratorType,\n  ExistentialType,\n  AnyType,\n  MixedType,\n  EmptyType,\n  NullableType,\n  ThisType,\n  TupleType,\n  UnionType,\n  IntersectionType,\n  VoidType,\n  RefinementType,\n  TypeParameterApplication\n} from './types';\n\n\nimport {\n  Declaration,\n  TypeDeclaration,\n  VarDeclaration,\n  ModuleDeclaration,\n  ModuleExportsDeclaration,\n  ClassDeclaration,\n  ParameterizedClassDeclaration,\n  ExtendsDeclaration\n} from './declarations';\n\nimport {\n  TypeParametersSymbol\n} from './symbols';\n\nimport TypeContext from './TypeContext';\n\nfunction defineProperty (name: string, value: any) {\n  Object.defineProperty(globalContext, name, {\n    value: value\n  });\n}\n\ndefineProperty('TypeParametersSymbol', TypeParametersSymbol);\ndefineProperty('TypeContext', TypeContext);\ndefineProperty('Type', Type);\ndefineProperty('TypeBox', TypeBox);\ndefineProperty('TypeParameter', TypeParameter);\ndefineProperty('TypeReference', TypeReference);\ndefineProperty('TypeTDZ', TypeTDZ);\ndefineProperty('ParameterizedTypeAlias', ParameterizedTypeAlias);\ndefineProperty('TypeAlias', TypeAlias);\ndefineProperty('TypeConstructor', TypeConstructor);\ndefineProperty('GenericType', GenericType);\ndefineProperty('NullLiteralType', NullLiteralType);\ndefineProperty('NumberType', NumberType);\ndefineProperty('NumericLiteralType', NumericLiteralType);\ndefineProperty('BooleanType', BooleanType);\ndefineProperty('BooleanLiteralType', BooleanLiteralType);\ndefineProperty('SymbolType', SymbolType);\ndefineProperty('SymbolLiteralType', SymbolLiteralType);\ndefineProperty('StringType', StringType);\ndefineProperty('StringLiteralType', StringLiteralType);\ndefineProperty('ArrayType', ArrayType);\ndefineProperty('ObjectType', ObjectType);\ndefineProperty('ObjectTypeCallProperty', ObjectTypeCallProperty);\ndefineProperty('ObjectTypeIndexer', ObjectTypeIndexer);\ndefineProperty('ObjectTypeProperty', ObjectTypeProperty);\ndefineProperty('FunctionType', FunctionType);\ndefineProperty('FunctionTypeParam', FunctionTypeParam);\ndefineProperty('FunctionTypeRestParam', FunctionTypeRestParam);\ndefineProperty('FunctionTypeReturn', FunctionTypeReturn);\ndefineProperty('ParameterizedFunctionType', ParameterizedFunctionType);\ndefineProperty('PartialType', PartialType);\ndefineProperty('RefinementType', RefinementType);\ndefineProperty('TypeParameterApplication', TypeParameterApplication);\ndefineProperty('GeneratorType', GeneratorType);\ndefineProperty('ExistentialType', ExistentialType);\ndefineProperty('FlowIntoType', FlowIntoType);\ndefineProperty('AnyType', AnyType);\ndefineProperty('MixedType', MixedType);\ndefineProperty('EmptyType', EmptyType);\ndefineProperty('NullableType', NullableType);\ndefineProperty('ThisType', ThisType);\ndefineProperty('TupleType', TupleType);\ndefineProperty('UnionType', UnionType);\ndefineProperty('IntersectionType', IntersectionType);\ndefineProperty('VoidType', VoidType);\ndefineProperty('Declaration', Declaration);\ndefineProperty('VarDeclaration', VarDeclaration);\ndefineProperty('TypeDeclaration', TypeDeclaration);\ndefineProperty('ModuleDeclaration', ModuleDeclaration);\ndefineProperty('ModuleExportsDeclaration', ModuleExportsDeclaration);\ndefineProperty('ClassDeclaration', ClassDeclaration);\ndefineProperty('ParameterizedClassDeclaration', ParameterizedClassDeclaration);\ndefineProperty('ExtendsDeclaration', ExtendsDeclaration);\n\nexport default globalContext;\n"],"names":["primitiveTypes","makeJSONError","validation","hasErrors","input","context","errors","path","message","expectedType","expected","toString","actual","typeOf","resolvePath","field","stringifyPath","concat","pointer","join","push","cyclicValidation","WeakMap","cyclicToString","WeakSet","inValidationCycle","type","tracked","get","weakSetHas","e","startValidationCycle","set","endValidationCycle","inToStringCycle","has","startToStringCycle","add","endToStringCycle","delete","weakset","value","weakSetAdd","weakSetDelete","validIdentifierOrAccessor","Validation","prefix","cyclic","candidate","matchPath","length","didClear","error","parts","Array","i","part","test","String","subject","undefined","Map","RuntimeTypeError","name","TypeError","delimiter","makeTypeError","collected","trim","makeError","validate","compareTypes","a","b","TypeAlias","TypeParameter","unwrap","compareWith","FlowIntoType","AnyType","ExistentialType","MixedType","Type","typeName","Error","captureStackTrace","assert","errorMessages","getErrorMessage","key","params","replace","m","TupleType","types","checkPredicate","accepts","inputTypes","isGreater","result","ArrayType","inCycle","startCycle","elementType","endCycle","output","BooleanLiteralType","BooleanType","EmptyType","FlowIntoSymbol","Symbol","bound","default","recorded","boundOrDefault","withBinding","id","defaultType","flowIntoTypeParameter","typeParameter","existing","target","hasError","union","toJSON","FunctionTypeParam","optional","FunctionTypeRestParam","FunctionTypeReturn","ParentSymbol","NameRegistrySymbol","ModuleRegistrySymbol","CurrentModuleSymbol","TypeConstructorRegistrySymbol","InferrerSymbol","TypeSymbol","TypeParametersSymbol","TypePredicateRegistrySymbol","FunctionType","returnType","annotation","annotationParam","param","acceptsType","any","inputReturnType","returnTypeResult","inputParams","inputParam","rest","paramsLength","args","argsLength","empty","GeneratorType","next","return","throw","isValid","yieldType","nextType","TypeParameterApplication","typeInstances","parent","inner","hasProperty","getProperty","items","typeInstance","warnedInstances","TypeConstructor","emitWarningMessage","GenericType","impl","invariant","collectConstraintErrors","addConstraints","constraints","constraint","violation","constraintsAccept","ObjectTypeProperty","isStatic","static","constructor","targetPath","ObjectTypeIndexer","keyResult","valueResult","ObjectTypeCallProperty","collectErrorsWithIndexers","collectErrorsWithoutIndexers","collectErrorsExact","ObjectType","properties","indexers","callProperties","exact","property","getIndexer","hasIndexer","indexer","acceptsKey","hasCallProperties","acceptsCallProperties","acceptsWithIndexers","acceptsExact","acceptsWithoutIndexers","compareTypeCallProperties","compareTypeWithIndexers","compareTypeWithoutIndexers","body","indent","callProperty","inputCallProperties","identicalCount","j","inputCallProperty","loop","seen","indexOf","acceptsValue","inputIndexers","inputProperties","inputProperty","inputIndexer","lines","split","IntersectionType","prop","object","getPropertyIndex","mergeProperties","source","typeProp","index","hasConstraints","withDeclaration","NullLiteralType","VoidType","NullableType","NumericLiteralType","NumberType","PartialType","typeParameters","expand","ParameterizedTypeAlias","getPartial","partial","identifier","typeCreator","limit","Math","min","intersect","ParameterizedFunctionType","acceptsParams","acceptsReturn","assertParams","assertReturn","bodyCreator","function","RefinementType","StringLiteralType","JSON","stringify","StringType","SymbolLiteralType","SymbolType","ThisType","TypeBox","reveal","mixed","ref","warnedMissing","TypeReference","RevealedName","RevealedValue","TypeTDZ","getRevealed","container","UnionType","normalized","registerPrimitiveTypes","t","null","Object","freeze","number","boolean","string","symbol","void","existential","registerBuiltinTypeConstructors","declareTypeConstructor","Date","isNaN","getTime","Promise","futureType","keyType","valueType","keyTypes","valueTypes","findKey","Set","registerTypePredicates","setPredicate","isArray","then","TypeInferer","primitive","inferPrimitive","inferred","inferComplex","inferFunction","inferObject","fromCharCode","fn","box","inferArray","inferDict","handler","getTypeConstructor","inferTypeParameters","apply","inferInternal","numericIndexers","stringIndexers","values","item","inferredType","array","makeReactPropTypes","objectType","props","propName","componentName","makeWarningMessage","makeUnion","merged","mergeUnionTypes","aTypes","bTypes","bType","aType","makePropertyDescriptor","typeSource","propertyName","descriptor","shouldAssert","augmentExistingAccessors","propertyToAccessor","makePropertyName","getClassName","resolveType","receiver","call","safeName","className","initializer","writable","config","propertyPath","check","defineProperty","warn","originalSetter","annotateValue","Declaration","VarDeclaration","TypeDeclaration","typeAlias","addConstraint","ModuleDeclaration","moduleExports","exporting","declaration","declarations","moduleName","slice","innerContext","import","modules","module","ModuleExports","ClassDeclaration","superClass","errorPath","errorMessage","superClassName","ParameterizedClassDeclaration","class","ExtendsDeclaration","$DiffType","$FlowFixMeType","$KeysType","keys","literal","$ObjMapiType","mapper","applied","invoke","$ObjMapType","$PropertyType","unwrapped","$ShapeType","$SubType","$SuperType","$TupleMapType","tuple","ClassType","instanceType","prototype","isPrototypeOf","getAnnotation","acceptsInstance","Number","Boolean","matches","warnedInvalidReferences","TypeContext","mode","TypeInferrer","inferrer","infer","propertyNames","current","fromParent","global","getPredicate","predicate","annotate","moduleRegistry","nameRegistry","var","head","handlerRegistry","instancePrototype","getPrototypeOf","parentPrototype","parentClass","typeParametersPointer","typeParam","createContext","currentModule","ModuleExportsDeclaration","tail","unshift","method","tdz","from","clauses","pop","pattern","tests","clause","wrappedIterator","_$PropertyType","globalContext"],"mappings":"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"}